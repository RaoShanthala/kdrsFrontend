<template>
<div>
    <b-card bg-variant="light">
        <b-form inline>
            <b-form-group  label="工事コード" class="mr-2">
                <b-form-input id="projCode" v-model="projSearchForm.projCode"/>
            </b-form-group>
            <b-form-group label="工事名称" class="mr-3">
                <b-form-input id="projName" v-model="projSearchForm.projName"/>
            </b-form-group>
            <b-form-group class="mt-5 mb-1 mr-2">
                <b-form-radio-group v-model="projSearchForm.targetState" :options="projSearchForm.targetStateOptions"/>
            </b-form-group>
            <b-form-group v-if="projSearchForm.targetState==2" label="工事着手日From" class="mr-3">
                <b-datepicker today-button reset-button close-button
                    label-today-button="今日" label-reset-button="クリア" label-close-button="キャンセル"
                    placeholder="日付を選択してください" v-model="projSearchForm.startDateBegin"/>
            </b-form-group>
            <b-form-group v-if="projSearchForm.targetState==2" label="工事着手日To" class="mr-3">
                <b-datepicker today-button reset-button close-button
                    label-today-button="今日" label-reset-button="クリア" label-close-button="キャンセル"
                    placeholder="日付を選択してください" v-model="projSearchForm.endDateBegin"/>
            </b-form-group>
            <b-form-group  v-if="projSearchForm.targetState==4" label="工事完了日From" class="mr-3">
                <b-datepicker today-button reset-button close-button
                    label-today-button="今日" label-reset-button="クリア" label-close-button="キャンセル"
                    placeholder="日付を選択してください" v-model="projSearchForm.startDateComplete"/>
            </b-form-group>
            <b-form-group v-if="projSearchForm.targetState==4" label="工事完了日To" class="mr-3">
                <b-datepicker today-button reset-button close-button
                    label-today-button="今日" label-reset-button="クリア" label-close-button="キャンセル"
                    placeholder="日付を選択してください" v-model="projSearchForm.endDateComplete"/>
            </b-form-group>
            <b-form-group class="mr-1" style="margin-top:2rem;">
                <b-button @click="projSearch(null)" class="mr-1">検索</b-button>
                <b-button variant="outline-primary" @click="resetProjSearchForm">クリア</b-button>
            </b-form-group>
        </b-form>
         <div class="text-right mt-1">
                <b-button @click="registerProject" class="mr-1">新規</b-button>
                <!--b-button  variant="info" to ="/menu">戻る</b-button-->
        </div>
        <br />
        <div v-if="projData.length">
        <b-table ref="tableRef"
            head-variant="light"
            class="table-sm table-bordered text-nowrap"
            :sticky-header="tableHeight"
            no-border-collapse
            responsive
            striped
             @row-selected="projSelect"
            :items="projData"
            :fields="projFields">
            <template #cell(update)="row">
                <b-link class="button" v-on:click="updateProject(row.item.projId)">更新/削除</b-link> 
                <!--b-button size="sm" @click="updateProject(row.item.projId)">更新/削除</b-button-->
            </template> 
        </b-table>    
        </div>
    </b-card>
    <div v-if="isLoadingProj" class="text-center text-danger my-2">
        <b-spinner class="align-middle"></b-spinner>
        <strong>検索中...</strong>
    </div>
</div>
</template>

<style scoped>
#flexButton {
    margin-bottom: -2rem;
}
.button {
  font: 11px Arial;
  text-decoration: none;
  background-color: #7E7E7E; /* #817d7d; */
  color: #FFFFFF;
  padding: 4px 20px 4px 20px;
  border-top: 1px solid #CCCCCC;
  border-right: 1px solid #333333;
  border-bottom: 1px solid #333333;
  border-left: 1px solid #CCCCCC;
}
</style>

<script>
import axios from 'axios'
import apiUrls from '../../common/apiUrls'
import commonMethods from '../../common/commonMethods'

export default {
    data() {
        return {
            projSearchForm: {
                projCode:  '',
                projName:  '',
                targetState: this.projSettings && this.projSettings.targetState || 5,
                startDateBegin: '',
                endDateBegin: '',
                startDateComplete: '',
                endDateComplete: '',
                targetStateOptions: [
                    { value: 1, text: '工事未着手' },
                    { value: 2, text: '工事着手' },
                    { value: 3, text: '工事未完了' },
                    { value: 4, text: '工事完了' },
                    { value: 5, text: '工事すべて' }]
            },
            tableHeight: this.projSettings && this.projSettings.tableHeight || '175px',
            projData: [],
            projFields: [],
            isLoadingProj: false,
            clickCount: 1,
            selectedRowProjId:'',
            currentMenuName:''
        }
    },
    created: function() {
        if(!this.$store.state.loginData.accessToken) {
            this.$router.push('/')
        } 
        this.currentMenuName = commonMethods.getCurrentMenu();
        let savedProjCode = commonMethods.loadCommonArea(this.currentMenuName + "_ProjCode");
        let savedProjName = commonMethods.loadCommonArea(this.currentMenuName + "_ProjName");
        commonMethods.deleteCommonArea(this.currentMenuName + "_ProjCode");
        commonMethods.deleteCommonArea(this.currentMenuName + "_ProjName");
        if (savedProjCode){
           this.projSearchForm.projCode =  savedProjCode;
        }
        if (savedProjName){
            this.projSearchForm.projName = savedProjName;
        }
        if (savedProjCode || savedProjName) {
            this.projCheck();
        }         

    },    
    methods: {
         async projCheck(){
           await this.projSearch();
         },
         
         async projSearch(searchMode) {
            this.projData = [];
            this.isLoadingProj = true;
            let startDate, endDate;
            if (this.projSearchForm.targetState == 2) {
                startDate = this.projSearchForm.startDateBegin;
                endDate = this.projSearchForm.endDateBegin;
            } else if (this.projSearchForm.targetState == 4) {
                startDate = this.projSearchForm.startDateComplete;
                endDate = this.projSearchForm.endDateComplete;
            } else {
                startDate = '';
                endDate = '';
            }
            let payload;
            if(searchMode) {
                payload = {
                    ...this.projSearchForm.projCode    && { projCode:   this.projSearchForm.projCode },
                    ...this.projSearchForm.targetState && {targetState: + this.projSearchForm.targetState},  
                }
            } else {
                payload = {
                    searchMode: searchMode,
                    ...this.projSearchForm.projCode    && { projCode:   this.projSearchForm.projCode },
                    ...this.projSearchForm.projName    && { projName:   this.projSearchForm.projName },
                    ...this.projSearchForm.targetState && {targetState: + this.projSearchForm.targetState},
                    ...startDate && {targetStartDate: startDate},
                    ...endDate && {targetEndDate:   endDate}
                }
            }
            let axiosConfigObject = {
                headers: {
                    Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                    'Content-Type': 'application/json',
                    },
                params:  payload}
            await axios.get(apiUrls.referProjectMany, axiosConfigObject)
            .then(response => {
                this.projData = response.data.resDt;
                
                this.projFields = this.createFields(response.data.resDtTitle);
                if(response.data.resultCode != '000') {
                    this.message = response.data.resultMessage;
                    }
            })
            .catch(error => {
                this.message = error.response.data;
            })
            .finally(() => {
                this.isLoadingProj = false;
                this.$emit('searchData', this.projSearchForm);
                this.$emit('projSearchButton', this.clickCount++);
                if (this.selectedRowProjId){
                    const row = this.projData.findIndex(x => x.projId === this.selectedRowProjId);
                    this.$refs.tableRef.selectRow(row);
                }
            })
        },
        projSelect(item) {
            if(item[0]) {
                this.$emit('emittedProjParams', item[0]);
            } else {
                this.$emit('emittedProjParams', {});
            }
    
        },

        registerProject() {
            commonMethods.saveCommonArea(this.currentMenuName + "_ProjCode", this.projSearchForm.projCode);
            commonMethods.saveCommonArea(this.currentMenuName + "_ProjName", this.projSearchForm.projName);
            this.$store.state.searchForm = this.searchForm
            this.$store.state.responseData = ''
            //this.$router.push('registerproject')
            commonMethods.clickMenuForward(this.$route.path, 'registerproject');
        },

        updateProject(item) {
            commonMethods.saveCommonArea(this.currentMenuName + "_ProjCode", this.projSearchForm.projCode);
            commonMethods.saveCommonArea(this.currentMenuName + "_ProjName", this.projSearchForm.projName);
          
            this.$store.state.searchForm = this.searchForm

            let payload = {
                projId: item
            }
            let axiosConfigObject = {
                headers: {
                    Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                    'Content-Type': 'application/json',
                },
                params:  payload
            }
            axios.get(apiUrls.referProjectMany, axiosConfigObject).then(response => {
                if(response.data.resultCode != '000') {
                    console.log(response.data.resultMessage);
                    this.message = commonMethods.getResponseMessage(response);
                }else{                   
                    this.$store.state.responseData = response.data.resDt[0]; 
                    commonMethods.clickMenuForward(this.$route.path, 'projectupdate');
                }
            })
            .catch(error => {
                this.message = commonMethods.getErrorMessage(error);
            })       
        },

        resetProjSearchForm() {
            this.projSearchForm = {
                projCode: '',
                projName: '',
                startDateComplete: '',
                endDateComplete: '',
                startDateBegin: '',
                endDateBegin: '',
                targetState: this.projSettings && this.projSettings.targetState || 5,
                targetStateOptions: [
                    { value: 1, text: '工事未着手' },
                    { value: 2, text: '工事着手' },
                    { value: 3, text: '工事未完了' },
                    { value: 4, text: '工事完了' },
                    { value: 5, text: '工事すべて' }]
            }
        },
        
        //カラム作成・並べ替え関数
        createFields(obj, order) {
            let a = [];
            let b = [];
            for(let i in obj) { a.push( {'key': i, 'label': obj[i]} ); }
            if(order) {
                for(let i in order) { b.push(a[order[i]]); }
                return b;
            }
            a.push( {'key': 'update', 'label': ''} )
            return a;
        },
    }    
}
</script>