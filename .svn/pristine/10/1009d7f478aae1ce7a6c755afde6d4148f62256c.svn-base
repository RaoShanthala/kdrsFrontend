<template>
    <div>
        <comp-proj-status
            v-if="isShowProjChoice"
            :class-print-hide-proj="classPrintHideProj"
            v-on:emitProjParams="emittedProjSelectedEvent"
            v-on:emitProjSearchButton="emittedProjSearchButtonEvent"
            v-on:emitProjPrintButton="emittedProjPrintButtonEvent"/>

        <comp-area-status
            v-if="isShowAreaChoice"
            :prod-input="areaSearchForm"
            :class-print-hide-area="classPrintHideArea"
            v-on:emitAreaParams="emittedAreaSelectedEvent"
            v-on:emitAreaSearchButton="emittedAreaSearchButtonEvent"
            v-on:emitAreaPrintButton="emittedAreaPrintButtonEvent"/>

        <comp-prod-status
            v-if="isShowProdChoice"
            :prod-input="prodSearchForm"
            :class-print-hide-prod="classPrintHideProd"
            v-on:emitProdParams="emittedProdSelectedEvent"
            v-on:emitProdSearchButton="emittedProdSearchButtonEvent"
            v-on:emitProdPrintButton="emittedProdPrintButtonEvent"/>

        <b-alert class="mt-4 print-hide" v-if="message" show variant="danger">{{ message }}</b-alert>
    </div>
</template>

<style scoped>
    @media print {
        .print-hide {
            display: none;
        }
        .card {
            border: none;
        }
    }
    @page {
        size:auto;
        margin-top: 1rem;
    }
</style>

<script>
//import axios from 'axios'
//import apiUrls from '../../common/apiUrls'
//import commonMethods from '../../common/commonMethods'
import compProjStatus from "@/components/compProjStatus.vue";
import compAreaStatus from "@/components/compAreaStatus.vue";
import compProdStatus from "@/components/compProdStatus.vue";

export default {
    components: {
        compProjStatus,
        compAreaStatus,
        compProdStatus,
    },
    data() {
        return {
            // projSelected: {},
            // areaSelected: {},
            prodSelected: [],

            isShowProjChoice: true,
            isShowAreaChoice: false,
            isShowProdChoice: false,

            // isShowProjTable: false,
            // isShowProdTable: false,
            message: '',
            table_height: window.innerHeight - 380 + 'px',
            // isLoadingProj: false,
            // isLoadingProd: false,
            // isShowProdProcPlanSearch: true,
            classPrintHideProj: '',
            classPrintHideArea: '',
            classPrintHideProd: '',
            //工区関連データ
            areaSearchForm: {
                projId: '',
                projCode: '',
                projName: '',
                aggTypeCode: '',
            },
            AggTypeCode: 'Area',
            //製品関連データ
            prodSearchForm: {
                projId: '',
                projCode: '',
                projName: '',
                aggTypeCode: '',
                aggUnitCode: '',
                aggUnitName: '',
            },

        }
    },
    // watch:{
    //     projSelected: function(newValue) {
    //         console.log('projSelected newValue.projId=' + newValue.projId);
    //         if(newValue.projId) {
    //             // this.isShowProdChoice = false;
    //             //this.clearData(['prodSeq', 'procList']);
    //             setTimeout(()=>this.isShowProdChoice = true, 100);
    //         } else {
    //             this.isShowProdChoice = false;
    //             //this.clearData(['prodSeq', 'procList']);
    //         }
    //     },
    //     projSearchButtonCount: function() {
    //         console.log('projSearchButtonCount !');
    //         //this.clearData(['prodSeq', 'procList']);
    //         this.projSelected = {};
    //     },
    // },

    created: function() {
        if(!this.$store.state.loginData.accessToken) {
            this.$router.push('/')
        }
    },
    methods: {
        emittedProjSearchButtonEvent(value) {
            console.log('emittedProjSearchButtonEvent value=' + value);
            this.projSearchButtonCount = value;
            this.isShowAreaChoice = false;
            this.isShowProdChoice = false;
            // this.projSelected = {};
            this.areaSearchForm = {};
            this.prodSearchForm = {};
        },
        emittedAreaSearchButtonEvent(value) {
            console.log('emittedProjSearchButtonEvent value=' + value);
            this.projSearchButtonCount = value;
            this.isShowProdChoice = false;
            // this.areaSelected = {};
            this.prodSearchForm = {};
        },
        emittedProdSearchButtonEvent(value) {
            // console.log('emittedProdSearchButtonEvent value=' + value);
            this.prodSearchButtonCount = value;
        },

        emittedProjSelectedEvent(value) {
            console.log('emittedProjSelectedEvent value=' + value);
            console.log('emittedProjSelectedEvent value.projId=' + value.projId);
            console.log('emittedProjSelectedEvent this.areaSearchForm.projId=' + this.areaSearchForm.projId);
            console.log('emittedProjSelectedEvent value.projCode=' + value.projCode);
            console.log('emittedProjSelectedEvent value.projName=' + value.projName);
            if(value.projId) {
                if (value.projId != this.areaSearchForm.projId) {
                    // 工事コンポーネントの工事が選択されている状態で別の工事が選択された場合、
                    // 工区コンポーネントのisShowAreaChoiceをfalseにしてからtrueにすることで工区コンポーネントのcreateイベントを発生させる。
                    // このイベントで、工区コンポーネントの工事コードと工事名を再描画し検索結果をクリアする。
                    this.isShowAreaChoice = false;
                }
                // this.projSelected = value;
                this.areaSearchForm.projId = value.projId;
                this.areaSearchForm.projCode = value.projCode;
                this.areaSearchForm.projName = value.projName;
                this.areaSearchForm.aggTypeCode = 'Area';
                // this.areaSearchForm.aggTypeCode = '';

                setTimeout(()=>this.isShowAreaChoice = true, 100);
            } else {
                // this.projSelected = value;
                this.areaSearchForm = {};
                this.isShowAreaChoice = false;
            }
        },
        emittedAreaSelectedEvent(value) {
            console.log('emittedAreaSelectedEvent value=' + value);
            console.log('emittedAreaSelectedEvent value.aggTypeCode=' + value.aggTypeCode);
            console.log('emittedAreaSelectedEvent value.aggUnitCode=' + value.aggUnitCode);
            console.log('emittedAreaSelectedEvent value.aggUnitName=' + value.aggUnitName);
            console.log('emittedAreaSelectedEvent areaSearchForm.projId=' + this.areaSearchForm.projId);
            console.log('emittedAreaSelectedEvent areaSearchForm.projCode=' + this.areaSearchForm.projCode);
            console.log('emittedAreaSelectedEvent areaSearchForm.projName=' + this.areaSearchForm.projName);
            // this.areaSelected = value;
            // this.isShowProdChoice = true;
            if(value.aggUnitCode) {
                if (value.aggUnitCode != this.areaSearchForm.aggUnitCode) {
                    // 工区コンポーネントの工区が選択されている状態で別の工区が選択された場合、
                    // 工区コンポーネントのisShowProdChoiceをfalseにしてからtrueにすることで製品コンポーネントのcreateイベントを発生させる。
                    // このイベントで、製品コンポーネントの工事コードと工事名を再描画し検索結果をクリアする。
                    this.isShowProdChoice = false;
                }
                this.prodSearchForm.projId = this.areaSearchForm.projId;
                this.prodSearchForm.projCode = this.areaSearchForm.projCode;
                this.prodSearchForm.projName = this.areaSearchForm.projName;
                this.prodSearchForm.aggTypeCode = value.aggTypeCode;
                this.prodSearchForm.aggUnitCode = value.aggUnitCode;
                this.prodSearchForm.aggUnitName = value.aggUnitName;
                // this.isShowProdChoice = false;
                setTimeout(()=>this.isShowProdChoice = true, 100);
            } else {
                // this.prodSearchForm.projId = '';
                // this.prodSearchForm.projCode = '';
                // this.prodSearchForm.projName = '';
                // this.prodSearchForm.aggTypeCode = '';
                // this.prodSearchForm.aggUnitCode = '';
                // this.prodSearchForm.aggUnitName = '';
                this.prodSearchForm = {};
                this.isShowProdChoice = false;
            }
        },
        emittedProdSelectedEvent(value) {
            console.log('emittedProdSelectedEvent value.prodCode=' + value.prodCode);
            console.log('emittedProdSelectedEvent value.prodName=' + value.prodName);
            this.prodSelected = value;
        },

        emittedProjPrintButtonEvent(value) {
            console.log('emittedProjPrintButtonEvent value=' + value);
            console.log('emittedProjPrintButtonEvent this.classPrintHideProj=' + this.classPrintHideProj);
            this.projSearchButtonCount = value;
            this.classPrintHideProj = '';
            this.classPrintHideArea = 'print-hide';
            this.classPrintHideProd = 'print-hide';
        },
        emittedAreaPrintButtonEvent(value) {
            console.log('emittedProjPrintButtonEvent value=' + value);
            console.log('emittedProjPrintButtonEvent this.classPrintHideProj=' + this.classPrintHideProj);
            this.projSearchButtonCount = value;
            this.classPrintHideProj = 'print-hide';
            this.classPrintHideArea = '';
            this.classPrintHideProd = 'print-hide';
        },
        emittedProdPrintButtonEvent(value) {
            // console.log('emittedProdPrintButtonEvent value=' + value);
            // console.log('emittedProdPrintButtonEvent this.classPrintHideProd=' + this.classPrintHideProd);
            this.prodSearchButtonCount = value;
            this.classPrintHideProj = 'print-hide';
            this.classPrintHideArea = 'print-hide';
            this.classPrintHideProd = '';
        },
    }
}
</script>