<template>
  <div>
     <proj-search :projInput="projInput"  
            v-on:emittedProjParams="emitProjEvent"
            v-on:projSearchButton="projSearchButtonEvent"
            v-on:searchData="searchData"/>

    <div v-if="isProjectNamePresent"  >
       <div class="text-right mt-1">
            <b-button @click="registerAgg" class="mr-1">新規/更新</b-button>
            <!--b-button  variant="info" to ="/menu">戻る</b-button-->
       </div> 
       <br/>
       <div v-if="aggSelected.length">
          <b-card bg-variant="light">
                <b-row>
                    <b-col>
                        <b-form inline class="mt-1">
                        <span class="mr-4 mt-1" style="font-size: 18px"><b>集計分類(親)一覧 </b></span>       
                        <span><strong>工事名称: </strong>{{this.projNameSelected}}</span>
                     </b-form>    
                    </b-col>
                </b-row>
                <br/>            
                <b-table 
                    head-variant="light" 
                    sticky-header = "200px" 
                    class="table-sm table-bordered text-nowrap"
                    hover selectable select-mode="single" 
                    striped
                    no-border-collapse
                    selected-variant="info"
                    :items="aggSelected" 
                    :fields="aggFields"
                    @row-selected="aggSelect">
                    <template #cell(update)="row">
                        <b-link class="button" v-on:click="deleteAggunit(row)">削除</b-link>
                        <!--b-button size="sm" @click="deleteAggunit(row)">削除</b-button-->
                    </template>  
                </b-table>   
            </b-card>                     
        </div>
        <div v-if="isLoadingData" class="text-center text-danger my-2">
            <b-spinner class="align-middle"></b-spinner>
            <strong>検索中...</strong>
        </div>        
                     
    </div>
    <b-alert class="mt-4" v-if="message" show variant="danger">{{ message }}</b-alert>
    
    <div v-if="isShowAggDetail"  >
        <b-card bg-variant="light">
            <b-row>
                <b-col>
                     <b-form inline class="mt-1">
                        <span class="mr-4 mt-1" style="font-size: 18px"><b>集計分類(子)一覧 </b></span>       
                        <span><strong>工事名称: </strong>{{this.projNameSelected}}</span>
                        <span class="space"><strong>集計分類コード - 名称：</strong>{{ this.aggTypeCodeSelected }} - {{ this.aggTypeNameSelected }}</span>
                        <span class="space"><strong>集計単位コード - 名称：</strong>{{ this.aggUnitCodeSelected }} - {{ this.aggUnitNameSelected }}</span>
                    </b-form> 
                </b-col>  
            </b-row>        
            <br/>
            <div v-if="aggDetailData.length" >     
                <b-table
                    head-variant="light" 
                    sticky-header = "200px" 
                    class="table-sm table-bordered text-nowrap"
                    hover selectable select-mode="single"    
                    striped 
                    no-border-collapse
                    selected-variant="info"
                    :items="aggDetailData" 
                    :fields="aggDetailFields">
                    <template #cell(update)="row">
                        <b-link class="button" v-on:click="deleteAggunitAggunit(row)">削除</b-link>       
                        <!--b-button class="btn btn-primary btn-xs" @click="deleteAggunitAggunit(row)">削除</b-button -->
                    </template>  
                </b-table>
            </div>        
        </b-card>         
    </div>
    <b-alert class="mt-4" v-if="messageDetail" show variant="danger">{{ messageDetail }}</b-alert>

  </div>
</template>

<style lang="css" scoped>
.space{
   padding-left: 30px ;
 }
 .button {
  font: 11px Arial;
  text-decoration: none;
  background-color: #7E7E7E; /* #817d7d; */
  color: #FFFFFF;
  padding: 4px 20px 4px 20px;
  border-top: 1px solid #CCCCCC;
  border-right: 1px solid #333333;
  border-bottom: 1px solid #333333;
  border-left: 1px solid #CCCCCC;
}
</style>

<script>
import axios from "axios";
import apiUrls from "../../common/apiUrls";
import commonMethods from '../../common/commonMethods'
import projSearch from "@/components/ProjSearch.vue";

 export default {

    components: {
        projSearch
    },

    data() {
     return {
      projInput: {
          projCode: '',
          projName: '',
          targetState:'',
          selectedRowProjId:''
      },    
      message: "",
      projId:"0",
      projCode:'',
      projSelected: [],
      aggFields: [],
      aggSelectedItem: '',
      aggSelected: [],
      aggData:'',
      isProjectNamePresent: false,
      isLoadingData:false,
      isShowAggDetail:false,
      titleDetail : '集計詳細',
      projNameSelected:'',
      aggTypeCodeSelected :'',
      aggTypeNameSelected:'',
      aggUnitCodeSelected : '',
      aggUnitNameSelected:'',
      aggDetailData: [],
      aggDetailFields: [],
      messageDetail: '',
    };
  },

  created: function() {
    if(!this.$store.state.loginData.accessToken) {
      this.$router.push('/');
    }

    this.projInput.projCode = commonMethods.loadCommonArea("AggregateSearchProjCode");
    this.projInput.projName = commonMethods.loadCommonArea("AggregateSearchProjName");
    this.projInput.targetState = commonMethods.loadCommonArea("AggregateSearchTargetState");
    this.projInput.selectedRowProjId = commonMethods.loadCommonArea("AggregateSearchSelectedRowProjId");
 
    commonMethods.deleteCommonArea("AggregateSearchProjCode");
    commonMethods.deleteCommonArea("AggregateSearchProjName");
    commonMethods.deleteCommonArea("AggregateSearchTargetState");
    commonMethods.deleteCommonArea("AggregateSearchSelectedRowProjId");
  //  this.projInput.projCode = 1;
   // alert(this.projInput.projCode);
  }, 

  methods: { 
   
    emitProjEvent(value) {    
      this.projSelected = value;
      this.projId = this.projSelected.projId
      this.projNameSelected = this.projSelected.projName; 
      this.projCode = this.projSelected.projCode;
      this.onChangeProjSelect();
    },

    searchData(data){
       this.projInput.projCode = data.projCode;
       this.projInput.projName = data.projName;
       this.projInput.targetState = data.targetState;
     /*  alert(this.projInput.projCode);
       alert(this.projInput.projName);
       alert(this.projInput.targetState); */
    },

    projSearchButtonEvent(value) {
        this.projSearchButtonCount = value;
    },

    getNow() {
      let today = new Date(Date.now());
      return today.toISOString().slice(0, 10);
    },
    
    async onChangeProjSelect(){
       if (this.projId === '0'){
         this.isProjectNamePresent = false;
       } else{
          this.isProjectNamePresent = true; 
          this.aggregateCheck();
       }    
    },
    
    async aggregateFetch() {
        this.isLoadingData = true;
        this.aggData= '';
        this.aggFields = [];
        this.aggSelected = [];
        this.message = '';
        let payload = {
            projId:   this.projId ,
            //  ...this.aggregateSearchForm.aggTypeCode   && { aggTypeCode:   this.aggregateSearchForm.aggTypeCode },
        }
        let axiosConfigObject = {
            headers: {
                Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                'Content-Type': 'application/json',
            },
            params:  payload
        }
        await axios.get(apiUrls.referAggDataMany, axiosConfigObject).then(response => {     
            if(response.data.resultCode != '000') {
                this.message = commonMethods.getResponseMessage(response);
            }else{
                this.aggData = response.data.resDt;
                this.aggFields = this.createFields(response.data.resDtTitle);
            }        
        })
        .catch(error => {
            this.message = error;
            // this.message = commonMethods.getErrorMessage(error);
        })
        .finally(() => {
            commonMethods.saveCommonArea("AggregateSearchProjCode", this.projInput.projCode);
            commonMethods.saveCommonArea("AggregateSearchProjName", this.projInput.projName);
            commonMethods.saveCommonArea("AggregateSearchTargetState", this.projInput.targetState);
            commonMethods.saveCommonArea("AggregateSearchSelectedRowProjId", this.projId);
            this.isLoadingData = false;
        })
    },

    async aggregateCheck() {
        await this.aggregateFetch();
        if(this.aggData.length > 0) {
            this.aggSelected = this.aggData;
        } else {
            this.isShowAggDetail = false;
            this.message = "no data";
            console.log("no data");
        }
    },

    async aggSelect(item){     
        this.aggTypeCodeSelected = '';
        this.aggUnitCodeSelected = '';
        this.isShowAggDetail = false;
        console.log (item);
        if(item[0]) {
            this.aggTypeCodeSelected = item[0].aggTypeCode;
            this.aggUnitCodeSelected = item[0].aggUnitCode;
            this.aggTypeNameSelected = item[0].aggTypeName;
            this.aggUnitNameSelected = item[0].aggUnitName;
            this.isShowAggDetail = true;
            await this.getAggDetailData();
        } else {
            this.isShowAggDetail = false;
        }
    },

    async getAggDetailData(){
        this.aggDetailData = [];
        this.aggDetailFields = [];
        let payload = {
            aggTypeParCode: this.aggTypeCodeSelected,
            aggUnitParCode: this.aggUnitCodeSelected,
            projId :this.projId
        }
        let axiosConfigObject = {
            headers: {
                Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                'Content-Type': 'application/json',
            },
            params:  payload
        }
        await axios.get(apiUrls.referAggUnitAggUnitMany, axiosConfigObject).then(response => {
            this.aggDetailData = response.data.resDt;
            this.aggDetailFields = this.createFields(response.data.resDtTitle);
            if(response.data.resultCode != '000') {
                this.message = commonMethods.getResponseMessage(response);
            }
        })
        .catch(error => {
            this.message = commonMethods.getErrorMessage(error);
        })
        .finally(() => {
            this.isLoadingData = false;
        })
    },

    deleteAggunit(row) {
        if (confirm('削除しますか？')) {
            let payload = {
                tranId:        '',
                resultCode:    null,
                resultMessage: null,
                user:          null,
                terminal:      null,
                reqDateTime:   null,
                resDateTime:   null,
                reqHd: {
                  projId: this.projId,
                  aggTypeParCode: row.item.aggTypeCode,
                  aggUnitParCode: row.item.aggUnitCode,
                }      
            }
            console.log ("projId == " + this.projId);
            console.log( " row.item.aggTypeCode == " + row.item.aggTypeCode);
            console.log(" row.item.aggUnitCode == "  + row.item.aggUnitCode);
            let axiosConfigObject = {
                headers: {
                    Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                    'Content-Type': 'application/json',
                },
                data:    payload
            }   
            axios.delete(apiUrls.removeAgg, axiosConfigObject).then((response) => {
                if(response.data.resultCode != '000') {
                  this.message = commonMethods.getResponseMessage(response);
                } else {
                  alert(response.data.resultMessage);
                 // commonMethods.clickMenuBack();
                 this.aggregateCheck();
                 this.getAggDetailData();
                }
            })
            .catch(error => {
                this.message = commonMethods.getErrorMessage(error);
            })
        }
    },
    
    async deleteAggunitAggunit(row){
      if (confirm('削除しますか？')) {
        let payload = {
          tranId:        '',
            resultCode:    null,
            resultMessage: null,
            user:          null,
            terminal:      null,
            reqDateTime:   null,
            resDateTime:   null,
            reqHd: {
              aggTypeParCode: this.aggTypeCodeSelected,
              aggUnitParCode: this.aggUnitCodeSelected,
              projId :this.projId,
              aggTypeChiCode: row.item.aggTypeChiCode,
              aggUnitChiCode: row.item.aggUnitChiCode
            }
        }

      /*  console.log ("this.aggTypeCodeSelected, " + this.aggTypeCodeSelected);
        console.log ("this.aggUnitCodeSelected, " + this.aggUnitCodeSelected);
        console.log ("this.this.projIdSelected, " + this.projId);
        console.log ("this.typeChiCode, " +  row.item.aggTypeChiCode);
        console.log ("this.unitChiCode, " + row.item.aggUnitChiCode);*/

        let axiosConfigObject = {
          headers: {
            Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
            'Content-Type': 'application/json',
          },
          data:    payload
        }
        axios.delete(apiUrls.removeAggunitAggunit, axiosConfigObject).then((response) => {
          if(response.data.resultCode != '000') {
            this.messageDetail = commonMethods.getResponseMessage(response);
          } else {
            alert(response.data.resultMessage)
            this.getAggDetailData();
          }
        })
        .catch(error => {
          this.messageDetail = commonMethods.getErrorMessage(error);
        })
      }
    },

    registerAgg(){
        console.log("Entered register agg method ");
       /* commonMethods.saveCommonArea('AggTypeCode', this.aggregateSearchForm.aggTypeCode);
        commonMethods.saveCommonArea('AggProjId', this.projId);
        commonMethods.saveCommonArea('AggProjName', this.projNameSelected);
        commonMethods.saveCommonArea('AggTypeCode', "setsu"); */
         var data = {
            projId:this.projId,
            projCode:this.projCode,
            projName:this.projNameSelected,
            aggTypeCode:"setsu",
        }
        console.log ("data == " + data);
        this.$store.state.responseData  = data; 
        commonMethods.clickMenuForward(this.$route.path, 'registerupdateagg');
    }, 

    //カラム作成・並べ替え関数
    createFields(obj, order) {
        let a = [];
        let b = [];
        for(let i in obj) { a.push( {'key': i, 'label': obj[i]} ); }
        if(order) {
            for(let i in order) { b.push(a[order[i]]); }
            return b;
        }
        a.push( {'key': 'update', 'label': ''} )
        return a;
    },


  },
};
</script>        