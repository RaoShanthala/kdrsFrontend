<template>
  <div>
    <b-card bg-variant="light">
      <b-form>
        <b-container >
          <div  style=" display: inline-block">    
            <br />

            <b-form-row >      
              <b-form-group label="工事名称:" label-cols-sm="5">
                <b-form-select v-model="projName" :options="projNameOptions" @change="onChangeProjSelect()" ></b-form-select>         
              </b-form-group>  
              <b-form-group label="取込NO:" label-cols-sm="5">
                <b-form-input v-model="importNo" disabled></b-form-input>         
              </b-form-group>  
            </b-form-row>
            <div><p style="color: #ff0000;" id="projNameError"></p> </div>
            <br /> 
            <br /> 
   
           <div v-if="isProjectNamePresent" >
            <b-form-row> 
              <table >
                <b-col style="padding:0 150px 0 100px "> 
                  <tr>
                   <td> <label>集計分類(親)コード:</label> </td>
                  </tr>
                  <tr>
                    <td> <b-form-select v-model="aggTypeCode" :options="aggTypeCodeOptions" @change="onChange1()" ></b-form-select> </td>
                  </tr>
                  <tr>
                    <td> <div><p style="color: #ff0000;" id="aggTypeCodeError"></p> </div>   </td>
                  </tr>   
                  <tr>
                    <td>
                      <div id="table-scroll">
                        <table class="table table-bordered table-hover">     
                          <tr v-for="(item, value) in aggUnitCodeOptions"  @click="selectRow(value)" :key="value" :class="{'highlight': (value == aggUnitCode)}">
                            <td style="height:45px"> <label><input type="hidden" v-model="aggUnitCode"></label> {{item.text}} </td>
                          </tr> 
                        </table>  
                      </div>
                   </td>  
                  </tr>
                  <tr>
                    <td> <div><p style="color: #ff0000;" id="aggUnitCodeError"></p> </div>   </td>
                  </tr> 
                  <br/>
                  <tr>  
                    <td><b-button id="add_aggUnitCode"  v-b-modal.aggUnitCode_modal>集計単位(親)コード登録</b-button></td>
                  </tr>
                </b-col>
              </table>                     
              <br />
              <br />

              <b-modal
                 id="aggUnitCode_modal"
                 title="集計単位(親)コード登録"
                 @ok="add_aggUnitCode_modal">
                 <b-form>
                   <label for="agg_type_code">集計分類コード</label>
                   <b-form-input id="agg_type_code" v-model="new_agg_type_code"/>
                   <label for="agg_unit_code">集計単位コード</label>
                   <b-form-input id="agg_unit_code" v-model="new_agg_unit_code"/>
                   <label for="agg_unit_name">集計単位名称</label>
                   <b-form-input id="agg_unit_name" v-model="new_agg_unit_name"/>
                 </b-form>
              </b-modal>

              <table >
                <b-col style="padding:0 100px 0 100px;"> 
                  <tr>
                    <td> <label>集計分類(子)コード:</label> </td>
                  </tr>
                  <tr>
                    <td><b-form-select v-model="aggTypeCodeChild" :options="aggTypeCodeChildOptions" @change="onChange2()" ></b-form-select>   </td>
                  </tr>
                  <tr>
                    <td> <div><p style="color: #ff0000;" id="aggTypeCodeChildError"></p> </div>   </td>
                  </tr> 
                  <tr>
                   <td>
                     <div id="table-scroll" v-if="isLoadingaggUnitCodeChild">
                       <table class="table table-bordered table-hover">     
                         <tr v-for="(item, value) in aggUnitCodeChildOptions"  :key="value">
                           <td v-if="item.value === '0'" class="highlight"> <label><input type="checkbox" :value="item.value" v-model="aggUnitCodeChild" disabled ></label></td>
                           <td v-else> <label><input type="checkbox" :value="item.value" v-model="aggUnitCodeChild"></label></td>
                           <td v-if="item.value === '0'" class="highlight"> {{item.text}} </td>
                           <td v-else>{{item.text}} </td>
                         </tr> 
                       </table>  
                     </div>
                   </td>
                 </tr>
                 <tr>
                   <td> <div><p style="color: #ff0000;" id="aggUnitCodeChildError"></p> </div>   </td>
                 </tr>
                 <tr>   
                   <td><b-button id="add_aggUnitCode"  v-b-modal.aggUnitCode_modal>集計単位(子)コード登録</b-button></td>       
                 </tr> 
                </b-col>
              </table>       
            </b-form-row>       
            <br />   
           </div>
          </div> 
        </b-container>
      </b-form>
    </b-card>
    <b-alert v-if="message" show variant="danger">{{ message }}</b-alert>
    <div class="text-right mt-1">
      <b-button @click="registerAgg" class="mr-1">登録</b-button>
      <!--b-button variant="info" @click="backToProduct" to="/projects" class="mr-1">戻る</b-button-->
    </div>
  </div>
</template>

<style scoped>

#table-scroll {
  height:150px;
  overflow:auto;  
  margin-top:20px;
}

.highlight {
  background-color: grey;
}
tr:hover{
  cursor: pointer;
}

#add_aggUnitCode {
  margin-bottom: 1rem;
}
</style>

<script>
import axios from "axios";
import apiUrls from "../../common/apiUrls";
import commonMethods from '../../common/commonMethods'

 export default {
  data() {
    return {
      message: "",
      appTypeData: [],
      appUnitData: [],
      projName:"0",
      aggTypeCode:"setsu",
      aggUnitCode:"0",
      aggTypeCodeChild:"0",
      importNo:0,
      aggUnitCodeChild:[],
      projNameOptions: [],
      aggTypeCodeOptions: [],
      aggTypeCodeChildOptions: [],
      aggUnitCodeOptions: [],
      aggUnitCodeChildOptions : [],
      childData:[],
      isProjectNamePresent: false,
      isLoadingaggUnitCode: true,
      isLoadingaggUnitCodeChild : false, 
      projNamePresent: false, 
      aggTypeCodePresent: false, 
      aggUnitCodePresent:false,
      aggTypeCodeChildPresent: false,
      aggUnitCodeChildPresent: false,
      new_agg_type_code:"",
      new_agg_unit_code:"",
      new_agg_unit_name:"",


    };
  },

  created: function() {
    if(!this.$store.state.loginData.accessToken) {
      this.$router.push('/');
    }
    this.getData();
  }, 
 
  methods: { 

    getNow() {
      let today = new Date(Date.now());
      return today.toISOString().slice(0, 10);
    },

    async selectRow(aggUnitCode){
      this.aggUnitCode = aggUnitCode;  
      if (this.aggUnitCode != '0' && this.aggTypeCodeChild != '0'){
        this.getChildUnitCodesFromDB();
      } 
    },

    async onChangeProjSelect(){
       if (this.projName === '0'){
         this.isProjectNamePresent = false;
       } else{
          this.isProjectNamePresent = true; 
          await this.getAggUnitListAll(this.projName,"setsu");
          if (this.aggUnitCode != '0' && this.aggTypeCodeChild != '0'){
             this.getChildUnitCodesFromDB();
          }
       }    
    },

    async getChildUnitCodesFromDB(){
      let payload = {
        projId: this.projName,
        aggTypeCode: this.aggTypeCode,
        aggUnitCode: this.aggUnitCode ,
        aggTypeCodeChild: this.aggTypeCodeChild   
      }    
      let axiosConfigObject = {
        headers: {
          Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
          'Content-Type': 'application/json',
        },
        params:  payload
      }
      await axios.get(apiUrls.getChildInfo, axiosConfigObject).then(response => {    
        if(response.data.resultCode != '000') {
          this.message = commonMethods.getResponseMessage(response);
        }else{
          this.aggUnitCodeChild = [];
          this.childData = [];
          this.childData = response.data.resDt;
           for(var i = 0; i < this.childData.length; i++){          
            this.aggUnitCodeChild.push(this.childData[i].aggUnitChiCode);                             
          }
          console.log(this.aggUnitCodeChild);
        }
      })
      .catch(error => {
        this.message = commonMethods.getErrorMessage(error);
      })        
    },

    async onChange1(){  
      console.log(this.aggTypeCode) 
      this.aggUnitCodeOptions = []; 
      if (this.projName === '0'){
         this.isProjectNamePresent = false;
         alert("工事名称をまず選択お願いします") 
      }else{    
        if (this.aggTypeCode === '0'){
          this.sLoadingaggUnitCode = false;
        }else{
          await this.getAggUnitListAll(this.projName,this.aggTypeCode);
        } 
      }   
    },

    async onChange2(){
      if (this.projName  === '0'){  
        alert("工事名称をまず選択お願いします")
        this.aggTypeCodeChild="0";
      }else{   
        this.aggUnitCodeChildOptions = [];  
        if (this.aggTypeCodeChild === '0'){
           this.isLoadingaggUnitCodeChild = false;
        }else {
           await this.getAggUnitListForProj(this.aggTypeCodeChild);
           this.isLoadingaggUnitCodeChild = true;
           if (this.aggUnitCode != "0"){
            await this.getChildUnitCodesFromDB();
           }
        }  
      } 
    },

    async getData(){
      await this.getProjectList();
      await this.getAggTypeList();
    },

    async getProjectList(){
      let axiosConfigObject = {
        headers: {
          Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
          'Content-Type': 'application/json',
        },
      }
      await axios.get(apiUrls.projectList, axiosConfigObject).then(response => {    
        if(response.data.resultCode != '000') {
          this.message = commonMethods.getResponseMessage(response);
        }else{
          this.projectData = response.data.resDt;
          this.projNameOptions.push({text:"工事を選択してください", value:"0"}) 
          for(var i = 0; i < this.projectData.length; i++){          
            this.projNameOptions.push({text:this.projectData[i].projName, value:this.projectData[i].projId});                             
          }
          console.log(this.projNameOptions);
        }
      })
      .catch(error => {
        this.message = commonMethods.getErrorMessage(error);
      })        
    },

    async getAggTypeList(){
      let axiosConfigObject = {
        headers: {
          Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
          'Content-Type': 'application/json',
        },
      }
      await axios.get(apiUrls.aggTypeList, axiosConfigObject).then(response => {    
        if(response.data.resultCode != '000') {
          this.message = commonMethods.getResponseMessage(response);
        }else{
          this.appTypeData = response.data.resDt;
        //  this.aggTypeCodeOptions.push({text:"集計分類(親)コードを選択してください", value:"0"}); 
          //this.aggTypeCodeOptions.push({text:"節", value:"setsu"}) ;
          this.aggTypeCodeChildOptions.push({text:"集計分類(親)コードを選択してください", value:"0"}) ;
          for(var i = 0; i < this.appTypeData.length; i++){          
            this.aggTypeCodeOptions.push({text:this.appTypeData[i].aggTypeName, value:this.appTypeData[i].aggTypeCode}); 
            this.aggTypeCodeChildOptions.push({text:this.appTypeData[i].aggTypeName, value:this.appTypeData[i].aggTypeCode});                            
          }
        }
      })
      .catch(error => {
        this.message = commonMethods.getErrorMessage(error);
      })        
    },

    async getAggUnitListAll(projId,selectedAggTypeCode){  
      let payload = {
            projId:     projId,
            aggTypeCode:  selectedAggTypeCode
      }  
      let axiosConfigObject = {
        headers: {
          Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
          'Content-Type': 'application/json',
        },
        params:  payload
      }
      await axios.get(apiUrls.aggUnitListAll, axiosConfigObject).then(response => {    
        if(response.data.resultCode != '000') {
          this.message = commonMethods.getResponseMessage(response);
        }else{
          this.aggUnitCodeOptions = [];
          this.appUnitData = response.data.resDt;
          this.isLoadingaggUnitCode = true; 
          this.aggUnitCodeOptions.push({text:"集計単位(親)コードを選択してください", value:"0"}) 
          for(var i = 0; i < this.appUnitData.length; i++){  
            this.aggUnitCodeOptions.push({text:this.appUnitData[i].aggUnitName, value:this.appUnitData[i].aggUnitCode});                                   
          }
        }
      })
      .catch(error => {
        this.message = commonMethods.getErrorMessage(error);
      })        
    },

    async getAggUnitListForProj(selectedAggTypeCode){ 
      this.aggUnitCodeChildOptions = [];
      let payload = {
            aggTypeCode:  selectedAggTypeCode,
            projId : this.projName
      }  
      let axiosConfigObject = {
        headers: {
          Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
          'Content-Type': 'application/json',
        },
        params:  payload
      }
      await axios.get(apiUrls.aggUnitList, axiosConfigObject).then(response => {    
        if(response.data.resultCode != '000') {
          this.message = commonMethods.getResponseMessage(response);
        }else{
          this.appUnitData = response.data.resDt;
          this.isLoadingaggUnitCodeChild = true;  
          this.aggUnitCodeChildOptions.push({text:"集計単位(子)コードを選択してください", value:"0"})
          for(var i = 0; i < this.appUnitData.length; i++){          
            this.aggUnitCodeChildOptions.push({text:this.appUnitData[i].aggUnitName, value:this.appUnitData[i].aggUnitCode}); 
          // this.aggUnitCodeChildOptions.push({"集計単位(子)コード":this.appUnitData[i].aggUnitName}) ;                                          
          }
        }
      })
      .catch(error => {
        this.message = commonMethods.getErrorMessage(error);
      })        
    },

    registerAgg(){
      this.message = "";
      console.log (this.aggUnitCode);
      console.log(this.aggUnitCodeChild);

      this.checkInput();
        if (this.projNamePresent == true && this.aggTypeCodePresent &&  this.aggUnitCodePresent && this.aggTypeCodeChildPresent && this.aggUnitCodeChildPresent){
          if (confirm("登録しますか？")) { 
            //基本リクエストを作成する
            let payload = {
              transId: "",
              resultCode: null,
              resultMessage: null,
              user: null,
              terminal: null,
              reqDateTime: null,
              resDateTime: null,
              reqHd: {
                projId: this.projName,
                aggTypeCodeParent: this.aggTypeCode,
                aggTypeCodeChild: this.aggTypeCodeChild,
                aggUnitCodeParent: this.aggUnitCode,
                aggUnitCodeChild : this.aggUnitCodeChild,  
                importNo: this.importNo    
            },
           }; 
           let axiosConfigObject = {
             headers: {
                Authorization: "Bearer " + this.$store.state.loginData.accessToken,
                "Content-Type": "application/json",
             },
           };
           axios.post(apiUrls.registerAggregate, payload, axiosConfigObject).then((response) => {
            if (response.data.resultCode != "000") {
              this.message = commonMethods.getResponseMessage(response);
            } else {
              alert(response.data.resultMessage);
              this.$store.state.responseData = "";
             // this.$router.push("aggregate");
              commonMethods.clickMenuForward(this.$route.path, 'aggregate');
            }
           })
          .catch((error) => {
            this.message = commonMethods.getErrorMessage(error);
           }); 
         }  
       }
     },

    async add_aggUnitCode_modal(){
       console.log(" Inside add_aggUnitCode_modal method ");
       console.log (this.new_agg_type_code);
       console.log (this.new_agg_unit_code);
       console.log (this.new_agg_unit_name);
       if (confirm("登録しますか？")) { 
          //基本リクエストを作成する
            let payload = {
              transId: "",
              resultCode: null,
              resultMessage: null,
              user: null,
              terminal: null,
              reqDateTime: null,
              resDateTime: null,
              reqHd: {
                aggTypeCode: this.new_agg_type_code,
                aggUnitCode: this.new_agg_unit_code,
                aggUnitName: this.new_agg_unit_name
              },
           };
        
           let axiosConfigObject = {
             headers: {
               Authorization: "Bearer " + this.$store.state.loginData.accessToken,
               "Content-Type": "application/json",
             },
           };
           axios.post(apiUrls.insertStdAggUnit, payload, axiosConfigObject).then((response) => {
              if (response.data.resultCode != "000") {
                this.message = commonMethods.getResponseMessage(response);
              } else {
                alert(response.data.resultMessage);
                this.$store.state.responseData = "";
                this.new_agg_type_code = "";
                this.new_agg_unit_code = "";
                this.new_agg_unit_name = "";  
             // this.$router.push("aggregate");
             // commonMethods.clickMenuForward(this.$route.path, 'aggregate');
              }
            })
            .catch((error) => {
              this.message = commonMethods.getErrorMessage(error);
            })
            .finally(() => {
               this.getAggUnitListAll(this.projName,this.aggTypeCode);
               if (this.aggTypeCodeChild){
                this.getAggUnitListForProj(this.aggTypeCodeChild);
               } 
            })    
        }  
    },
  
    checkInput() {
      var text1 = "";
      if (this.projName  === '0') {
        text1 = "工事名称を選択してください";
        this.projNamePresent = false;
      } else{
        this.projNamePresent = true; 
      }
      document.getElementById("projNameError").innerHTML = text1;
     
      text1 = "";
      if (this.aggTypeCode  === '0') {
        text1 = "集計分類(親)コードを選択してください";
        this.aggTypeCodePresent = false;
      } else{
        this.aggTypeCodePresent = true; 
      }
      document.getElementById("aggTypeCodeError").innerHTML = text1;

     // if (this.isLoadingaggUnitCode){
        text1 = ""; 
        console.log (this.aggUnitCode) ;
        if (this.aggUnitCode  == "0") {
          text1 = "集計単位(親)コードを選択してください";
          this.aggUnitCodePresent = false;
        } else{
           this.aggUnitCodePresent = true; 
        }
        console.log (this.aggUnitCodePresent);
        console.log (text1);
        document.getElementById("aggUnitCodeError").innerHTML = text1;
     // } 

      text1 = "";
      if (this.aggTypeCodeChild  === '0' ) {
        text1 = "集計分類(子)コードを選択してください";
        this.aggTypeCodeChildPresent = false;
      } else{
        this.aggTypeCodeChildPresent = true; 
      }
      document.getElementById("aggTypeCodeChildError").innerHTML = text1;

      if (this.isLoadingaggUnitCodeChild){
        text1 = "";  
        if (this.aggUnitCodeChild.length == 0) {
          text1 = "集計単位(子)コードを選択してください";
          this.aggUnitCodeChildPresent = false;
        } else{
          this.aggUnitCodeChildPresent = true; 
        }
        document.getElementById("aggUnitCodeChildError").innerHTML = text1;
      } 

    },
    
  },
};
</script>