<template>
    <div>
        <comp-proj-search
            :proj-settings="projSettings"
            v-on:emitProjSelect="emittedProjSelect"
            v-on:projSearchButton="projSearchButtonEvent"
        />
            <!-- :proj-input="{}" -->
        <comp-prod-search
            v-if="isShowProdSearch"
            :proj-params="projSelected"
            :search-trigger="searchTrigger"
            v-on:emitProdFlagChange="emittedProdFlagChange"
            v-on:emitProdSelect="emittedProdSelect"
            v-on:prodSearchButton="prodSearchButtonEvent"/>
       
        <!--数量管理が１の場合-->
        <div v-if="projSelected.projCode && prodSelected.prodSeqMng===1 && procListData.length"> 
            <!--製品個別選択-->  
            <b-card bg-variant="light">
                <template #header>
                    <div v-if="prodFlag">
                        <strong>製品個別コートを選択してください</strong>
                    </div>
                    <div v-else>
                        <strong>部品個別コートを選択してください</strong>
                    </div>
                </template>
                <b-table
                    no-border-collapse
                    head-variant="light"
                    class="table-sm table-bordered text-nowrap"
                    hover
                    responsive
                    selectable
                    selected-variant="info"
                    select-mode="multi"
                    :items="prodSeqData"
                    :fields="prodSeqFields"
                    ref="prodSeqTable"
                    @row-selected="prodSeqSelect">
                </b-table>
            </b-card>
            <!--工程選択-->
            <b-card bg-variant="light">
                <template #header>
                    <strong>工程を選択してください</strong>
                </template>
                <b-row>
                    <b-col class="col-md-5">
                        <b-table
                            ref="procListTable"
                            no-border-collapse
                            head-variant="light"
                            sticky-header="16rem"
                            class="table-sm table-bordered text-nowrap mr-2"
                            hover
                            selectable
                            selected-variant="info"
                            select-mode="single"
                            :items="procListData"
                            :fields="procListFields"
                            @row-selected="procListSelect">
                        </b-table>
                    </b-col>
                    <b-col class="col-md-1">
                    </b-col>
                    <b-col class="col-md-5">
                        <br>
                        <br>
                        <b-col>
                            <b-form-radio-group v-model="procSelected" :options="procOptions"/>
                        </b-col>
                        <br>
                        <b-col>
                            <!--工程完了日・時刻選択-->
                            <b-form inline id="nomargin">
                                <b-form-group :label="procLabel.date" class="mr-1">
                                    <b-form-datepicker
                                        today-button
                                        reset-button
                                        close-button
                                        label-today-button="今日"
                                        label-reset-button="クリア"
                                        label-close-button="キャンセル"
                                        :placeholder="procComputedProps.placeholder"
                                        :disabled="procComputedProps.isDisabled"
                                        v-model="procComputedProps.date"/>
                                </b-form-group>
                                <b-form-group label="時刻">
                                    <b-form-timepicker
                                        now-button
                                        reset-button
                                        label-now-button="現在時刻"
                                        label-reset-button="クリア"
                                        label-close-button="キャンセル"
                                        :label-no-time-selected="procComputedProps.timePlaceholder"
                                        label-am="午前"
                                        label-pm="午後"
                                        hour12
                                        v-model="procComputedProps.time"
                                        :disabled="procComputedProps.isDisabled"/>
                                </b-form-group>
                             </b-form>
                        </b-col>
                    </b-col>
                    <b-col class="col-md-1" style="display:flex; align-items: flex-end; justify-content: flex-end; margin-bottom: 1rem;">
                        <div class="mr-3">
                            <b-button
                                :disabled="!(procListSelected && prodSeqSelected.length)"
                                @click="update">更新
                            </b-button>
                        </div>
                    </b-col>
                </b-row> 
            </b-card> 
        </div>

        <!--数量管理が０の場合-->
        <div v-if="projSelected.projCode && prodSelected.prodSeqMng===0 && procListData.length">
               <!--工程選択-->
            <b-card bg-variant="light">
                <template #header>
                    <strong>工程を選択してください</strong>
                </template>
                <b-row>
                    <b-col class="col-md-5">
                        <b-table
                            ref="procListTable"
                            head-variant="light"
                            sticky-header="16rem"
                            class="table-sm table-bordered text-nowrap mr-2"
                            hover
                            selectable
                            selected-variant="info"
                            select-mode="single"
                            :items="procListData"
                            :fields="procListFields"
                            @row-selected="procListSelect">
                        </b-table>
                    </b-col>
                        <b-col class="col-md-1">
                        </b-col>
                    <b-col class="col-md-5">
                        <br>
                        <br>
                        <b-col>
                            <b-form-radio-group v-model="procSelected" :options="procOptions"/>
                        </b-col>
                        <br>
                        <b-col>
                            <!--工程完了日・時刻選択-->
                            <b-form inline id="nomargin">
                                <b-form-group :label="procLabel.quantity" class="mr-3">
                                    <b-form-input v-model="doneQty"/>
                                </b-form-group>
                                <b-form-group :label="procLabel.date">
                                    <b-form-datepicker
                                        today-button
                                        reset-button
                                        close-button
                                        label-today-button="今日"
                                        label-reset-button="クリア"
                                        label-close-button="キャンセル"
                                        :placeholder="procComputedProps.placeholder"
                                        :disabled="procComputedProps.isDisabled"
                                        v-model="procComputedProps.date"/>
                                </b-form-group>
                            </b-form>
                        </b-col>
                    </b-col>
                    <b-col class="col-md-1" style="display:flex; align-items: flex-end; justify-content: flex-end; margin-bottom: 1rem;">
                        <div class="mr-3">
                            <b-button
                                :disabled="!procListSelected"
                                @click="update">更新
                            </b-button>
                        </div>
                    </b-col>
                </b-row>
            </b-card>
        </div>

        <div v-if="isLoadingProdSeq" class="text-center text-danger my-2">
        <b-spinner class="align-middle"></b-spinner>
        <strong>検索中...</strong>
        </div>
        
        <b-alert class="mt-4" v-if="message" show variant="danger">{{ message }}</b-alert>
    </div>
</template>

<style scoped>
/*
.form-inline {
    margin-bottom: 1rem;
}
.form-inline div {
    margin-right: 1rem;
}
#nomargin {
    margin: 0;
}
.form-inline label {
    justify-content: left;
}
.row{
    margin-left: 0;
    margin-right: 0;
}
.col, .col-4 {
    padding: 0;
    margin-left: 0;
}*/
</style>

<script>
import axios from 'axios';
import apiUrls from '../common/apiUrls';
import compProjSearch from "@/components/compProjSearch.vue";
import compProdSearch from "@/components/compProdSearch.vue";
import commonMethods from '../common/commonMethods'

export default {
    components: {
        compProjSearch,
        compProdSearch
    },
    data() {
        return {
            projSettings: { maintenanceMode: false, targetState: 5 },
            projSelected: {},
            prodSelected: {},
            //工程関連データ
            procListData: [],
            procListFields: [],
            procListSelected: '',
            procSelected: 1,
            prodFlag: 1,
            //製品個別データ
            prodSeqSearchForm: {
                prodCodeSeq: ''
            },
            prodSeqData: [],
            prodSeqFields: [],
            prodSeqSelected: [],

            message: '',
            time: this.getTime(),
            isShowProdSearch: false,
            isLoadingProdSeq: false,
            projSearchButtonCount: 0,
            prodSearchButtonCount: 0,
            doneQty: 0,
            procListTableSelectedRow: null,
            searchTrigger: false
        }
    },
    created: function() {
        if(!this.$store.state.loginData.accessToken) {
            this.$router.push('/')
        }
    },
    computed: {
        procOptions: function() {
            return [
                { value: 1, text: '開始' },
                { value: 2, text: '完了' },
                { value: 3, text: '中止' },
                { value: 4, text: '不良' },
                { value: 5, text: '取消', disabled: !this.prodSelected.prodSeqMng }
            ]
        },
        procLabel: function() {
            return {
                date: this.procOptions[this.procSelected-1].text + '日',
                quantity: this.procOptions[this.procSelected-1].text + '数量'
            }
        },
        procComputedProps: function() {
            let props = {};
            //数量管理
            if (this.prodSelected.prodSeqMng == 0) {
                let endCondition = parseInt(this.procListSelected.quantity) <= parseInt(this.procListSelected.endQuantity) + parseInt(this.doneQty);
                if (   (this.procSelected == 1 && this.procListSelected.startQuantity == 0)
                    || (this.procSelected == 2 && endCondition)
                    || (this.procSelected == 3 && this.procListSelected.abortQuantity == 0)
                    || (this.procSelected == 4 && this.procListSelected.failQuantity == 0) ) {
                        props.date = this.getNow();
                        props.placeholder = '日付を選択してください';
                        props.time = this.getTime();
                        props.isDisabled = false;                  
                } else {
                        props.date = '';
                        props.placeholder = '日付の選択はできません';
                        props.time = this.getTime();
                        props.isDisabled = true;
                }
            //個別管理
            } else
            if(this.procSelected == 5) {
                props.date = '';
                props.placeholder = '日付の選択はできません';
                props.time = '';
                props.timePlaceholder = '入力不可';
                props.isDisabled = true;
            } else {
                props.date = this.getNow();
                props.placeholder = '日付を選択してください';
                props.time = this.getTime();
                props.timePlaceholder = '時刻を選択してください';
                props.isDisabled = false;
            }
            return props;
        }
    },
    watch:{
        projSelected: function(newValue) {
            if(newValue.projId) {
                this.isShowProdSearch = false;
                this.clearData(['prodSeq', 'procList']);
                setTimeout(()=>this.isShowProdSearch = true, 1);
            } else {
                this.isShowProdSearch = false;
                this.clearData(['prodSeq', 'procList']);
            }
        },
        prodSelected: async function(newValue) {
            this.clearData(['prodSeq', 'procList']);
            if(newValue.prodId) {
                this.prodConfirm();
            }
        },
        projSearchButtonCount: function() {
            this.clearData(['prodSeq', 'procList']);
            this.projSelected = {};
        },
        prodSearchButtonCount: function() {
            this.clearData(['prodSeq', 'procList']);
            this.prodSelected = {};
        }
    },
    methods: {
        emittedProjSelect(value) {
            this.projSelected = value;
        },
        emittedProdFlagChange(value) {
            this.prodFlag = value;
            this.prodSelected = {};
        },
        emittedProdSelect(value) {
            this.prodSelected = value;
        },
        projSearchButtonEvent(value) {
             this.projSearchButtonCount = value;
        },
        prodSearchButtonEvent(value) {
             this.prodSearchButtonCount = value;
        },
        
        async prodConfirm() {
            if(this.prodSelected.prodSeqMng===0) {
                await this.procListFetch();
            } else {
                await this.procListFetch();
                await this.prodSeqFetch();
            }
        },

        async procListFetch() {
            this.clearData(['prodSeq']);
            let payload = {
                ...this.projSelected.projId && {projId:   this.projSelected.projId},
                ...this.prodSelected.prodId && {prodId:   this.prodSelected.prodId}
            }
            
            let axiosConfigObject = {
                headers: {
                    Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                    'Content-Type': 'application/json',
                    },
                params:  payload}

            await axios.get(apiUrls.referProcessMany, axiosConfigObject)
            .then(response => {
                this.procListData = response.data.resDt;
                this.procListFields = this.createFields(response.data.resDtTitle, [6,7,8,9,10,11,12,15,16]);
                if(response.data.resultCode != '000') {
                    this.message = commonMethods.getResponseMessage(response);
                }
            })
            .catch(error => {
                this.message = commonMethods.getErrorMessage(error);
            })
            .finally(() => {
                if(this.procListTableSelectedRow >= 0) {
                    this.$refs.procListTable.selectRow(this.procListTableSelectedRow);
                }
            })
        },

        procListSelect(items) {
            if(this.$refs.procListTable.selectedRows.length) {
                this.procListTableSelectedRow = this.$refs.procListTable.selectedRows.length - 1;
            }
            if(items[0]) {
                this.procListSelected = items[0];
            }
            else {
                this.procListSelected = '';
            }
        },

        //製品個別コード処理
        async prodSeqFetch() {
            this.clearData(['prodSeq']);
            this.isLoadingProdSeq = true;
            let payload = {
                ...this.projSelected.projId && { projId: this.projSelected.projId },
                ...this.prodSelected.prodId && { prodId: this.prodSelected.prodId },
            }
            
            let axiosConfigObject = {
                headers: {
                    Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                    'Content-Type': 'application/json',
                    },
                params:  payload}

            await axios.get(apiUrls.referProdseqProcProg1Prod, axiosConfigObject)
            .then(response => {
                this.prodSeqData = this.remakeResDt(response.data.resDt);
                this.prodSeqFields = this.remakeResDtTitle(response.data.resDtTitle);//, [3,4,5,6,7,8,9,10,11,12,13,14,15,16]);
                if(response.data.resultCode != '000') {
                    this.message = commonMethods.getResponseMessage(response);
                }
            })
            .catch(error => {
                this.message = commonMethods.getErrorMessage(error);
            })
            .finally(() => {
                if(this.prodSeqData.length == 1) {
                    this.prodSeqSelected = this.prodSeqData;
                    this.prodSeqSelectedShow.push(this.prodSeqSelected[0].prodCodeSeq);
                    if(this.$refs.prodSeqTable) {
                        this.$refs.prodSeqTable.selectRow(0);
                    }
                }
                this.isLoadingProdSeq = false;
            })
        },

        prodSeqSelect(items) {
            let res = [], resShow = []
            for(let i in items) {
                res.push(items[i]);
                resShow.push(items[i].prodCodeSeq);
            }
            this.prodSeqSelected = res;
            this.prodSeqSelectedShow = resShow;
        },

        async update() {
            if(confirm('更新しますか？')) {
                if(
                    this.prodSelected.prodSeqMng == 0 &&
                    this.procSelected == 2 && 
                    this.procDate == '' &&
                    this.prodSelected.quantity < this.prodSelected.endQuantity + this.doneQty
                ) {
                    alert('完了日付を入力してください');
                } else {
                    var reqDt = [];
                    if(this.prodSelected.prodSeqMng) {
                        this.prodSeqSelected.forEach(element => {
                            reqDt.push({
                                prodSeqMng: this.prodSelected.prodSeqMng,
                                prodCode:   element.prodCodeSeq
                            });
                        })
                    } else {
                        reqDt.push({
                            prodSeqMng: this.prodSelected.prodSeqMng,
                            prodCode:   this.prodSelected.prodCode,
                            quantity:   this.doneQty
                        });
                    }
                    let payload = {
                        reqHd: {
                            issueWarning: true,
                            projId:   this.projSelected.projId,
                            procCode: this.procListSelected.procCode,
                            action:   this.procSelected,
                            ...this.procComputedProps.date && {entryDatetime: this.procComputedProps.date + 'T' + this.procComputedProps.time},
                            userId:   this.$store.state.loginData.id
                        },
                        reqDt: reqDt
                    }
                    let axiosConfigObject = {
                        headers: {
                            Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                            'Content-Type': 'application/json',
                            }
                        }
                    await axios.post(apiUrls.registerProcess, payload, axiosConfigObject)
                    .then(response => {
                            if(response.data.resultCode.charAt() == '2') {
                                if(confirm(response.data.resultCode + ':' + response.data.resultMessage)) {
                                    let payload = {
                                        reqHd: {
                                            projId:   this.projSelected.projId,
                                            procCode: this.procListSelected.procCode,
                                            action:   this.procSelected,
                                             ...this.procComputedProps.date && {entryDatetime: this.procComputedProps.date + 'T' + this.procComputedProps.time},
                                            userId:   this.$store.state.loginData.id
                                        },
                                        reqDt: reqDt
                                    }
                                    let axiosConfigObject = {
                                        headers: {
                                            Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                                            'Content-Type': 'application/json',
                                        }
                                    }
                                    axios.post(apiUrls.registerProcess, payload, axiosConfigObject)
                                    .then(response => {
                                        if(response.data.resultCode !== '000') {
                                            //this.message = commonMethods.getResponseMessage(response);
                                            alert(commonMethods.getResponseMessage(response));
                                        } else {
                                            this.searchTrigger = true;
                                            this.prodConfirm();
                                            setTimeout(() => {
                                                this.searchTrigger = false;
                                            })
                                        }
                                    })
                                    .catch(error => {
                                        //this.message = commonMethods.getErrorMessage(error);
                                        alert(commonMethods.getErrorMessage(error));
                                    })
                                }
                            } else if(response.data.resultCode !== '000') {
                                //this.message = commonMethods.getResponseMessage(response);
                                alert(commonMethods.getResponseMessage(response));
                            } else {
                                this.searchTrigger = true;
                                 this.prodConfirm();
                                setTimeout(() => {
                                    this.searchTrigger = false;
                                })
                            }
                    })
                    .catch(error => {
                        //this.message = commonMethods.getErrorMessage(error);
                        alert(commonMethods.getErrorMessage(error));
                    })
                }
            }
        },

        clearData(items) {
            this.message = '';
            items.forEach(element => {
                if(element === 'proj') {
                    /*
                    this.projSearchForm = {
                        projCode: '',
                        projName: ''
                    }*/
                    this.projData = [];
                    this.projFields = [];
                    this.projSelectedItem = '';
                    this.projSelected = [];
                }
                if(element === 'prod') {
                    this.prodSearchForm = {
                        prodCode: '',
                        prodName: ''
                    }
                    this.prodData = [];
                    this.prodFields = [];
                    this.prodSelectedItem = '';
                    this.prodSelected = [];
                }
                if(element === 'proc') {
                    this.procData = [],
                    this.procFields = []
                }
                if(element === 'procList') {
                    this.procListData = [],
                    this.procListFields = [],
                    this.procListSelected = ''
                    //this.procSelected = 1
                }
                if(element === 'prodSeq') {
                    this.prodSeqData = [],
                    this.prodSeqFields = [],
                    this.prodSeqSelected = [],
                    this.prodSeqSelectedShow = []
                }
                if(element === 'update') {
                    this.projSearchForm = {
                        projCode: '',
                        projName: ''
                    }
                }
            });
        },
        getNow() {
            let today = new Date(Date.now());
            //return today.toISOString().slice(0, 10);
            let diff = today.getTimezoneOffset() * 60 * 1000;    // -540 * 60 * 1000 = -32400000 (ミリ秒)
            let localToday = new Date(today - diff);
            return localToday.toISOString().slice(0, 10)
        },

        getTime() {
            let today = new Date(Date.now())
            return today.toTimeString().slice(0,8)
        },

        //カラム作成・並べ替え関数
        createFields(obj, order) {
            let a = [];
            let b = [];
            for(let i in obj) { a.push( {'key': i, 'label': obj[i]} ); }
            if(order) {
                for(let i in order) { b.push(a[order[i]]); }
                return b;
            }
            return a;
        },

        //明細データ再編成関数
        remakeResDt(obj) {
            let c = [];
            for (let y in obj) {
                let a = {};
                for(let i in obj[y]) {
                    if (obj[y][i] instanceof Array) {
                        for(let n in obj[y][i]) {
                            a[i + n] = obj[y][i][n];
                        }
                    } else {
                        a[i] = obj[y][i];
                    }
                }
                c.push(a);
            }
            return c;
        },
        //カラム作成・並べ替え関数
        remakeResDtTitle(obj, order) {
            let a = []
            let b = []
            for(let i in obj) {
                if (obj[i] instanceof Array) {
                    for(let n in obj[i]) {
                        a.push( {'key': i + n, 'label': obj[i][n]} );
                    }
                } else {
                    if (i != 'listProgress') {
                        a.push( {'key': i, 'label': obj[i]} );
                    } else {
                        a.push( {'key': 'listProgress0', 'label': '工程１'} );
                        a.push( {'key': 'listProgress1', 'label': '工程２'} );
                        a.push( {'key': 'listProgress2', 'label': '工程３'} );
                        a.push( {'key': 'listProgress3', 'label': '工程４'} );
                        a.push( {'key': 'listProgress4', 'label': '工程５'} );
                        /*
                        a['listProgress0'] = '工程１';
                        a['listProgress1'] = '工程２';
                        a['listProgress2'] = '工程３';
                        a['listProgress3'] = '工程４';
                        a['listProgress4'] = '工程５';
                        */
                    }
                }
            }
            if(order) {
                for(let i in order) {
                    b.push(a[order[i]])
                }
                return b
            }
            return a
        }

    }
}
</script>
