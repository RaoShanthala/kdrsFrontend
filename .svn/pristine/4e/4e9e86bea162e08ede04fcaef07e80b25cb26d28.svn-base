<template>
    <div>
        <b-form inline id="login-form">       
            <b-input-group v-if="!this.$store.state.loginData.accessToken" class="mb-2 mr-sm-2 mb-sm-0">
            <b-input-group-prepend is-text><b-icon icon="person-fill"></b-icon></b-input-group-prepend>
            <b-form-input placeholder="ユーザ名" v-model="username" @keyup.enter="login"></b-form-input>
            </b-input-group>
            <b-input-group v-if="!this.$store.state.loginData.accessToken" class="mb-2 mr-sm-2 mb-sm-0">
            <b-input-group-prepend is-text><b-icon icon="lock-fill"></b-icon></b-input-group-prepend>
            <b-form-input placeholder="パスワード" v-model="password" type="password" @keyup.enter="login"></b-form-input>
            </b-input-group>
            <b-button @click="login" v-if="!this.$store.state.loginData.accessToken">送信</b-button>
            <b-button @click="logout" v-else>ログアウト</b-button>
      </b-form>

    <div v-if="this.$store.state.loginData.accessToken">
        <b-table :items="[this.$store.state.loginData]" :fields="fields"></b-table>
        <b-button to="/menu" variant="info">メニュー</b-button>
    </div>

       <div id="message" v-if="message">
        <b-alert show variant="danger">{{message}}</b-alert>
      </div>
    </div>
</template>

<style scoped>
    #message {
        margin-top: 1rem;
    }
    table {
        margin-top: 1rem;
    }
</style>

<script>
import axios from 'axios'
import apiUrls from '../common/apiUrls'
import security from '../common/security'
//import bcrypt from 'bcryptjs'
export default {
    data() {
        return {
            username: 'yasui',
            password: '123456',
            fields:  [
                    { key:   'username',    label: 'ユーザ名' }, 
                    { key:   'email',       label: 'メールアドレス' }, 
                    { key:   'password',    label: 'パスワード' }, 
                    { key:   'roles',       label: 'ロール' }, 
                    { key:   'accessToken', label: 'トークン' } 
                    ],
            message: ''
        }
    },
    methods: {
        login() {
            //let hashed_password = bcrypt.hashSync(this.password, 10)
            //let hashed_password = this.getHash(this.password)
            let hashed_password = security.getHash(this.password)
            this.message = ''
            axios.post(apiUrls.signIn,
            {
                username: this.username,
                password: hashed_password
            })
            .then(response => {
                response.data.password = hashed_password
                this.$store.state.loginData = response.data
                //this.$store.state.loginData
                //console.log(this.$store.state.loginData)
                /*
                requestParams.httpRequestHeaders = {
                    Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                    'Content-Type': 'application/json',
                    //'Access-Control-Allow-Origin': '*'
                }*/
            })
            .catch(error => {
                this.message = error
            })

        },
        logout() {
            this.$store.state.loginData = {
                id:          '',
                username:    '',
                email:       '',
                roles:       [],
                accessToken: ''
            }
            this.$store.rolesResDt = [];
            this.$store.rolesResDt = null;
            this.$store.roleLevelsResDt = [];
            this.$store.roleLevelsResDt = null;
        }
    }
}
</script>