<template>
<div>
    <b-card bg-variant="light">
        <b-form inline class="mb-1">
            <b-col class="col-md-9">
                <b-form inline class="mt-1">
                    <!-- <span class="mr-4 mt-1"><strong>工事ID：</strong>{{ projParams.projId }}</span> -->
                    <span class="mr-4 mt-1"><strong>工事コード：</strong>{{ projParams.projCode }}</span>
                    <strong>工事名称：</strong>{{ projParams.projName }}
                    <span class="mr-5"></span>
                    <!-- <b-form-radio-group plain @change="prodFlagChange" v-model="prodSearchForm.prodFlag" :options="prodFlagOptions"/> -->
                    <!-- <b-form-radio-group class="mr-4" @change="prodFlagChange" v-model="prodSearchForm.prodFlag" :options="prodFlagOptions"/> -->
                </b-form>
                <b-form inline class="mt-2">
                    <div style="margin-top: 0.0rem; margin-right:2rem;">
                        <!-- <b-form-radio-group class="mr-4" @change="prodFlagChange" v-model="prodSearchForm.prodFlag" :options="prodFlagOptions"/> -->
                        <b-form-radio class="mt-1" @change="prodFlagChange" v-model="prodSearchForm.prodFlag" value="1" >製品</b-form-radio>
                        <b-form-radio class="mt-2" @change="prodFlagChange" v-model="prodSearchForm.prodFlag" value="0" >部品</b-form-radio>
                    </div>
                    <!-- <b-form-group label="製品コード" class="mr-2">
                        <b-form-input v-model="prodSearchForm.prodCode"/>
                    </b-form-group> -->
                    <b-form-group :label="labelProdCode" class="mr-2">
                        <b-form-input v-if="prodSearchForm.prodFlag==1" v-model="prodSearchForm.prodCode"/>
                        <b-form-input v-else v-model="prodSearchForm.partCode"/>
                    </b-form-group>
                    <!-- <b-form-group label="製品名称" class="mr-2">
                        <b-form-input v-model="prodSearchForm.prodName"/>
                    </b-form-group> -->
                    <b-form-group :label="labelProdName" class="mr-2">
                        <b-form-input v-if="prodSearchForm.prodFlag==1" v-model="prodSearchForm.prodName"/>
                        <b-form-input v-else v-model="prodSearchForm.partName"/>
                    </b-form-group>
                    <!-- <b-form-group label="基準日" class="mr-2">
                            <b-datepicker
                                today-button
                                reset-button
                                close-button
                                label-today-button="今日"
                                label-reset-button="クリア"
                                label-close-button="キャンセル"
                                placeholder="日付を選択してください"
                                v-model="prodSearchForm.targetDate"/>
                    </b-form-group> -->
                    <!-- <div id="flexButton"> -->
                    <div style="margin-bottom: -2rem; margin-right:2rem;">
                        <b-button @click="prodSearch()" class="mr-1">検索</b-button>
                        <b-button variant="outline-primary" @click="resetProdSearchForm">クリア</b-button>
                    </div>
                    <b-form-row class="mt-4">
                        <div v-if="prodData.length">※日付入力欄のコピー（Ctrl+C）とペースト（Ctrl+V）はダブルクリックで可能</div>
                    </b-form-row>
                </b-form>
            </b-col>
        </b-form>

        <div v-if="prodData.length">
            <div class="table-wrapper">
            <b-table
                id="res-table"
                class="table-sm table-bordered text-nowrap"
                head-variant="light"
                no-border-collapse
                :items="prodData">
                <template slot="thead-top">
                    <tr>
                        <th
                            v-for="item in resDtTitle[0]"  :rowspan="item[2]=='rowspan'? item[1] : null"
                                :colspan="item[2]=='colspan'? item[1] : null" :key="item[0]+Math.random()">{{item[0]}}
                        </th>
                    </tr>
                    <tr>
                        <th
                            v-for="item in resDtTitle[1]" :key="item[0]+Math.random()">{{item}}
                        </th>
                    </tr>
                </template>
                <template v-slot:[`cell(${n})`]="data" v-for="n in updateColumns">
                    <!-- <b-form-input :key="data[n]" :style="inputStyle" type="date" max="9999-12-31"
                        :value="data.item[n]=='****-**-**'?'':data.item[n]" @change="updateItem"/> -->
                    <div v-if="data.item[n]==''" :key="data[n]" class="plan-item" />
                    <b-form-input v-else :key="data[n]" :style="inputStyle" type="date" max="9999-12-31"
                        :value="data.item[n]=='****-**-**'?'':data.item[n]" class="plan-item" @change="updateItem"/>
                </template>
            </b-table>
        </div>
            <b-button style="display:inline; float:right; margin-bottom:5px; margin-top:5px;" v-if="prodData.length" @click="update">登録</b-button>
        </div>
    </b-card>
    <div v-if="isLoadingProd" class="text-center text-danger my-2">
        <b-spinner class="align-middle"></b-spinner>
        <strong>検索中...</strong>
    </div>
    <b-alert v-if="message" show variant="danger">{{ message }}</b-alert>
</div>
</template>

<style scoped>
    .table-wrapper {
        position: relative;
        overflow-y: auto;
        overflow-x: auto;
        max-height: 700px;
    }

    #res-table tr th,
    #res-table tr td {
        vertical-align: middle;
        text-align: center;
        padding: 4px;
    }

    #res-table thead tr:nth-child(1) th {
        position: sticky;
        top: 0px;
    }
    #res-table thead tr:nth-child(2) th {
        position: sticky;
        top: 26px;
    }
</style>

<script>
import commonMethods from '../common/commonMethods';
import axios from 'axios';
import apiUrls from '../common/apiUrls';
export default {
    props: ['prodSettings', 'projParams', 'showData'],
    data() {
        return {
            prodSearchForm: {
                projId: '',
                prodFlag: 1,
                prodCode: '',
                prodName: '',
                partCode: '',
                partName: '',
                targetDate: '',
            },
            prodFlagOptions: [
                { value: 1, text: '製品' },
                { value: 0, text: '部品' },
            ],
            labelProdCode: '製品コード',
            labelProdName: '製品名称',
            message: '',
            updateData: [],
            resDt: [],
            resHd: {},
            backupData: [],
            updateColumns: [],
            resDtTitle: [],
            // tableHeight: this.prodSettings?.tableHeight || '600px',
            prodData: [],
            prodFields: [],
            isLoadingProd: false,
            clickCount: 1,
            inputStyle: 'width:170px',
         }
    },
    created: function() {
        if (!this.$store.state.loginData.accessToken) {
            this.$router.push('/')
        }
        if (this.showData == true){
            let currentMenuName = commonMethods.getCurrentMenu();
            let prodSearchForm = commonMethods.loadCommonArea(currentMenuName + '_ProdSearchForm'); 
            for (let item in this.prodSearchForm) {
                this.prodSearchForm[item] = prodSearchForm[item];
            }
            this.prodSearch(null);
        }
    },
   
    methods: {
        resetProdSearchForm() {
            for (let item in this.prodSearchForm) {
                if (item != 'projId' && item != 'prodFlag' && item != 'isShowProdSearch')
                this.prodSearchForm[item] = '';
            }
            this.prodData = [];
            this.message = '';
        },        
       prodFlagChange() {
            if (this.prodSearchForm.prodFlag == 1) {
                this.labelProdCode = '製品コード';
                this.labelProdName = '製品名称';
            } else {
                this.labelProdCode = '部品コード';
                this.labelProdName = '部品名称';
            }
            // this.prodSearchForm.prodCode = '';
            // this.prodSearchForm.prodName = '';
            this.prodData = [];
            this.message = '';
        },        
        async prodSearch(searchMode) {
            this.updateColumns = [];
            this.prodData = [];
            this.isLoadingProd = true;
            this.message = '';
            let prodPartCode = this.prodSearchForm.prodFlag == 1 ? this.prodSearchForm.prodCode : this.prodSearchForm.partCode;
            let prodPartName = this.prodSearchForm.prodFlag == 1 ? this.prodSearchForm.prodName : this.prodSearchForm.partName;
            if (searchMode) {
                var payload = {
                    searchMode: searchMode,
                    ...this.projParams.projId && { projId:   this.projParams.projId },
                    // ...this.projParams.projCode && { projCode:   this.projParams.projCode },
                    prodFlag:   this.prodSearchForm.prodFlag,
                    ...prodPartCode   && { prodCode:   prodPartCode },
                    ...prodPartName   && { prodName:   prodPartName },
                    ...this.prodSearchForm.targetDate && { targetDate:   this.prodSearchForm.targetDate }
                }
            } else {
                payload = {
                    ...this.projParams.projId && { projId:   this.projParams.projId },
                    // ...this.projParams.projCode   && { projCode:   this.projParams.projCode  },
                    // ...this.projParams.projName   && { projName:   this.projParams.projName },
                    prodFlag:   this.prodSearchForm.prodFlag ,
                    ...prodPartCode   && { prodCode:   prodPartCode },
                    ...prodPartName   && { prodName:   prodPartName },
                    // ...this.prodSearchForm.targetState && {targetState: + this.prodSearchForm.targetState},
                    ...this.prodSearchForm.targetDate && { targetDate:   this.prodSearchForm.targetDate }
                }
            }
            let axiosConfigObject = {
                headers: {
                    Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                    'Content-Type': 'application/json',
                },
                params:  payload
            }
            await axios.get(apiUrls.registerProdProcPlan, axiosConfigObject)
            .then(response => {
                if (response.data.resultCode == '000') {
                    // 工程の左側にある製品開始予定日、製品完了予定日の製品開始予定日の位置を求める
                    let idx_l = Object.entries(response.data.resDtTitle).findIndex(item => item[0] === 'listProgress') - 2;
                    // 製品開始予定日、製品完了予定日、工程ごとの開始予定日、完了予定日の合計項目数を求める
                    let idx_h = idx_l +  response.data.resDtTitle.listProgress.length*2 - 1 + 2;
                    for ( let i=idx_l; i<=idx_h; i++) {
                        this.updateColumns.push(i);
                    }
                    this.resDt = response.data.resDt;
                    this.resHd = response.data.resHd;
                    if (this.resDt.length) {
                        var tabData = this.createTableData(response.data.resDtTitle, response.data.resDt);
                        this.resDtTitle = [tabData[0], tabData[1]];
                        this.prodData = tabData[2];
                    }
                } else {
                    this.message = commonMethods.getResponseMessage(response);
                }
            })
            .catch(error => {
                this.message = commonMethods.getErrorMessage(error);
            })
            .finally(() => {
                this.isLoadingProd = false;
                this.$emit('prodSearchButton', this.clickCount++);
                var currentMenuName = commonMethods.getCurrentMenu();  
                // console.log('finally this.prodData.length=' + this.prodData.length);
                if (this.prodData.length > 0) {
                    commonMethods.saveCommonArea(currentMenuName + '_ProdSearchForm', this.prodSearchForm); 
                // }
                // console.log('finally this.resDt.length=' + this.resDt.length);
                // if (this.resDt.length) {
                    // this.backupData = [...document.getElementById('res-table').querySelectorAll('.form-control')].map(element => element.value);
                    // this.updateData = [...document.getElementById('res-table').querySelectorAll('.form-control')].map(element => element.value);
                    // tableのid="res-table"の中からclass="plan-item"のセルの項目値を一次元の配列で取得する
                    this.backupData = [...document.getElementById('res-table').querySelectorAll('.plan-item')].map(element => element.value);
                    this.updateData = [...document.getElementById('res-table').querySelectorAll('.plan-item')].map(element => element.value);


                    //ダブルクリックで日付をコピペ
                    let dateInputs = document.getElementById('res-table').querySelectorAll('[type="date"]');
                    dateInputs.forEach(element => {
                        // ダブルクリックイベントを登録し、それが発火した時に入力タイプを一旦TEXTに変える
                        element.addEventListener('dblclick', () => {
                            element.type = 'text';
                            // .select()（選択状態）メソッドが直ぐに動かないのでタイムアウトを設定
                            setTimeout(() => {
                                element.select();
                            })
                        });
                        // フォカストイベントで入力タイプをDATEに戻す
                        element.addEventListener('focusout', () => {
                            element.type = 'date';
                        });
                    });
                    let headerRows = document.getElementById('res-table').getElementsByTagName('thead')[0];
                    headerRows.removeChild(headerRows.lastChild);
                }
            })
        },

        prodSelect(item) {
            if(item[0]) {
                this.$emit('emittedProdParams', item[0]);
            } else {
                this.$emit('emittedProdParams', {});
            }
        },

        createFields(obj, order) {
            let a = [];
            let b = [];
            for (let i in obj) { a.push( {'key': i, 'label': obj[i]} ); }
            if (order) {
                for (let i in order) { b.push(a[order[i]]); }
                return b;
            }
            return a;
        },

        createTableData(resDtTitle, resDt) {
            //非表示データのキー取得
            var titleKeys = Object.keys(resDtTitle);
            var dataKeys = Object.keys(resDt[0]);
            var difference = dataKeys.filter(x => titleKeys.indexOf(x) === -1);
            //ヘッダー二段化
            var headerUp = [];
            var headerDown = [];
            Object.entries(resDtTitle).forEach(element => {
                if (element[0] == 'listProgress') {
                    element[1].forEach(element => {
                        var splittedElement = element.trim().split(/\s+/);
                        headerUp.push([splittedElement[0], splittedElement.length - 1, 'colspan']);
                        for(var i=1; i<splittedElement.length; i++) {
                            headerDown.push(splittedElement[i]);
                        }
                    });
                } else {
                    headerUp.push([element[1],2, 'rowspan']);
                }
            });
            //テーブルデータ展開
            var tableData = [];
            var rowData = [];
            resDt.forEach(element => {
                Object.entries(element).forEach(element => {
                    if (!difference.includes(element[0])) {
                        if (element[0] == 'listProgress') {
                            element[1].forEach(element => {
                                // console.log('element 1=' + element);
                                // スペースで分割する
                                // var splittedElement = element.trim().split(/\s+/);
                                // 工程が存在しないときは開始予定日、終了予定日をカンマ区切りの空白に変更したのでカンマで分割する
                                var splittedElement = element.trim().split(",");
                                splittedElement.forEach(element => {
                                    // console.log('element 2=' + element);
                                    rowData.push(element);
                                });
                            });
                        } else {
                            rowData.push(element[1]);
                        }
                    }
                });
                tableData.push(rowData);
                rowData = [];
            });
            return [headerUp, headerDown, tableData];
        },

        extractTableData(data) {
            //const data = [...document.querySelectorAll('.form-control')].map(element => element.value);
            // 製品開始予定日、製品完了予定日、各工程の開始予定日と完了予定日の項目数の合計（1行分）
            let chunkSize = this.updateColumns.length;
            // console.log('extractTableData() this.updateColumns.length=' + this.updateColumns.length);
            let res = [];
            for (let i = 0; i < data.length; i += chunkSize) {
                const chunk = data.slice(i, i + chunkSize);
                res.push(chunk);
            }
            return res;
        },

        updateItem() {
            // this.updateData = [...document.getElementById('res-table').querySelectorAll('.form-control')].map(element => element.value);
            // tableのid="res-table"の中からclass="plan-item"のセルの項目値を一次元の配列で取得する
            this.updateData = [...document.getElementById('res-table').querySelectorAll('.plan-item')].map(element => element.value);
        },

        update() {
            if (confirm('登録しますか？') == false) {
                return;
            }
            let listProcCode = this.resHd.listProcCode;
            let listprodId = this.resDt.map(element => element.prodId);
            // console.log('this.updateData.length=' + this.updateData.length);
            let upData = this.extractTableData(this.updateData);
            let bkData = this.extractTableData(this.backupData);

            let payload = {
                reqHd: {
                    projId: this.projParams.projId
                },
                reqDt: []
            };

            let index = -1;
            let isInsert = false;
            // console.log('listprodId.length=' + listprodId.length);
            for (let i=0; i<listprodId.length; i++) {
                // console.log('update i=' + i + ', update upData[i]=' + upData[i] + ', update bkData[i]=' + bkData[i]);
                if (upData[i][0] !== bkData[i][0] || upData[i][1] !== bkData[i][1]) {
                    isInsert = true;
                }
                for (let j=0; j<listProcCode.length; j++) {
                    // console.log('update j=' + j + ', update upData[i][j*2+2]=' + upData[i][j*2+2] + ', update bkData[i][j*2+2]=' + bkData[i][j*2+2]);
                    // console.log('update upData[i][j*2+1+2]=' + upData[i][j*2+1+2] + ', update bkData[i][j*2+1+2]=' + bkData[i][j*2+1+2]);
                    if(upData[i][j*2+2] !== bkData[i][j*2+2] || upData[i][j*2+1+2] !== bkData[i][j*2+1+2]) {
                        isInsert = true;
                    }
                }
                if(isInsert) {
                    index++;
                    payload.reqDt[index] = {};
                    payload.reqDt[index].prodId = listprodId[i];
                    payload.reqDt[index].listProgress = [];
                    upData[i][0] == bkData[i][0] ? payload.reqDt[index].startPlanDate = bkData[i][0] : payload.reqDt[index].startPlanDate = upData[i][0];
                    upData[i][1] == bkData[i][1] ? payload.reqDt[index].endPlanDate = bkData[i][1] : payload.reqDt[index].endPlanDate = upData[i][1];
                    for (let j=0; j<listProcCode.length; j++) {
                        if (upData[i][j*2+2] !== bkData[i][j*2+2] || upData[i][j*2+1+2] !== bkData[i][j*2+1+2]) {
                            payload.reqDt[index].listProgress.push({
                                procCode: listProcCode[j],
                                startPlanDate: upData[i][j*2+2],
                                endPlanDate: upData[i][j*2+1+2]
                            });
                        }
                    }
                }
                isInsert = false;
            }
            if (index == -1) {
                alert('登録対象のデータがありません。');
                return;
            }
            let axiosConfigObject = {
                headers: {
                    Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                    'Content-Type': 'application/json',
                }
            }
            axios.post(apiUrls.updateProdProcPlan, payload, axiosConfigObject)
                .then((response) => {
                    if(response.data.resultCode != '000') {
                        this.message = commonMethods.getResponseMessage(response);
                    }
                    else {
                        alert(response.data.resultMessage);
                        //this.$store.state.responseData = ''
                    }
                })
                .catch(error => {
                    this.message = commonMethods.getErrorMessage(error);
                })
                .finally(() => {
                    this.prodSearch(null);
                })
        }
    }
}
</script>