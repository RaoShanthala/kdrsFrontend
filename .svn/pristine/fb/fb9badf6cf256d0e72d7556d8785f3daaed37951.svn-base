<template>
<div>
    <b-card bg-variant="light">
        <b-row class="print-hide">  
            <b-col class="col-md-11">   
                <b-form inline class="mt-0">
                    <b-form-group  label="工事ID" class="mr-3">
                        <b-form-input id="projCode" v-model="projId"/>
                    </b-form-group>            
                    <b-form-group class="mt-4">
                        <b-button @click="projSearchClick" class="mr-1">検索</b-button>
                        <b-button variant="outline-primary" @click="resetProjSearchForm">クリア</b-button>
                    </b-form-group>
                </b-form>
            </b-col>
        </b-row> 
        <div v-if="projData.length">
            <p class="my-3 print-hide"><b>{{projName}}</b></p>
            <b-table
                head-variant="light"
                class="table-sm table-bordered text-nowrap proj-progress-table"
                :sticky-header="tableHeight"
                no-border-collapse
                responsive
                striped
                :items="projData"
                :fields="projFields"/>

            <div class="d-flex justify-content-end">
                <b-button @click="printProjTable" class="mr-0 print-hide">印刷</b-button>
            </div>

        </div>
    </b-card>
    <div v-if="isLoadingProj" class="text-center text-danger my-2">
        <b-spinner class="align-middle"></b-spinner>
        <strong>検索中...</strong>
    </div>
    <b-alert class="mt-4 print-hide" v-if="message" show variant="danger">{{ message }}</b-alert>
</div>
</template>

<style scoped>
    @media print {
        .print-hide {
            display: none;
        }
        .card {
            border: none;
        }
    }
    @page {
        size:auto;
        margin-top: 1rem;
    }
</style>


<script>
import axios from 'axios';
import apiUrls from '../common/apiUrls';
import commonMethods from '@/common/commonMethods';

export default {
    data() {
        return {
            titleProj: '進捗登録実績',
            projId: '1',
            projName: '',
            projData: [],
            projFields: [],
            isLoadingProj: false,
            tableHeight: '400px',
            message:'',
        }
    },
    methods: {
        async projSearchClick() {
            await this.projSearch();
            if (this.isShowProjTable != true) {
                return;
            }
            if (this.maintenanceMode == false) {
                return;
            }
        },        
        async projSearch() {
            this.projData = [];
            this.isLoadingProj = true;
            this.isShowProjTable = false;
            this.message = '';

            let payload = {
                    ...this.projId    && { projId:   this.projId },
                }
             
            let axiosConfigObject = {
                headers: {
                    Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                    'Content-Type': 'application/json',
                    },
                params:  payload}
            await axios.get(apiUrls.referProjProgressResultMany, axiosConfigObject)
            .then(response => {
                this.projData = response.data.resDt;
                this.projName = this.projData[0].projName;
                this.projFields = this.createFields(response.data.resDtTitle);
                if(response.data.resultCode != '000') {
                    this.message = commonMethods.getResponseMessage(response)
                 } else {
                    this.isShowProjTable = true;
                }
            })
            .catch(error => {
                this.message = commonMethods.getErrorMessage(error);
            })
            .finally(() => {
                this.isLoadingProj = false;                 
            })
        },

        resetProjSearchForm() {
            this.projId = '';
        },

        printProjTable () {
            commonMethods.printPrepare('proj-progress-table', this.projFields.length, this.titleProj, this.projName);
              commonMethods.sleep(100, 1, function () {
                // 100ミリ秒*1回、待機後確認メッセージを表示
                if (confirm('印刷プレビューをしますが、よろしいでしょうか？')) {
                    commonMethods.printDesingHandler('proj-progress-table', true);
                    window.print();
                    commonMethods.printDesingHandler('proj-progress-table', false);
                }
            });
        },
          
      
        createFields(obj, order) {
            let a = [];
            let b = [];
            for(let i in obj) { a.push( {'key': i, 'label': obj[i]} ); }
            if(order) {
                for(let i in order) { b.push(a[order[i]]); }
                return b;
            }
            if(this.maintenanceMode) {
                a.push( {'key': 'update', 'label': '', 'required': 'true' } )
            }
            return a;
        }
    }
}
</script>