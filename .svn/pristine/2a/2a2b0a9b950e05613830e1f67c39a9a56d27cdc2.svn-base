<template>
    <div>
         <comp-proj-search 
            :proj-settings="projSettings"
            :projInput="projInput"
            :class-print-hide-proj="classPrintHideProj"
            :revertTableContent="revertTableContent"
            v-on:emittedProjParams="emittedProjSelectedEvent"
            v-on:projSearchButton="projSearchButtonEvent"
            v-on:searchData="searchData"
            v-on:emitSelctedProjId = "emitSelctedProjId"
            v-on:emitShowOtherData="emittedShowOtherData"
            v-on:emitProjPrintButton="emittedProjPrintButtonEvent"/>

        <div v-if="isShowProdSearch">
            <b-card bg-variant="light" :class="classPrintHideProd">
                <b-row class="mb-2 print-hide">
                    <b-col class="col-md-9">
                        <b-form inline class="mt-1">
                            <span class="mr-4"><strong>工事コード：</strong>{{ project.projCode }}</span>
                            <strong>工事名称：</strong>{{ project.projName }}
                        </b-form>
                        <b-form inline class="mt-2">
                            <b-form-group label="製品コード" class="mr-2">
                                <b-form-input v-model="prodSearchForm.prodCode"/>
                            </b-form-group>
                            <b-form-group label="製品名称" class="mr-2">
                                <b-form-input v-model="prodSearchForm.prodName"/>
                            </b-form-group>
                            <div id="flexButton">
                                <b-button @click="getProductData()">検索</b-button>
                            </div>
                        </b-form>
                    </b-col>
                    <b-col class="col-md-3">
                        <div class="text-right mt-5 print-hide">
                            <b-button @click="aggregateProject" class="mr-1">集計</b-button>
                            <!-- <b-button @click="registerProduct" class="mr-1">新規</b-button> -->
                        </div>
                    </b-col>
                </b-row>

                <!-- <div v-if="prodData.length" class="mt-1"> -->
                <div v-if="isShowProdTable && prodData.length" class="mt-1">
                
                    <b-table ref="tableRefProd"
                        head-variant="light"
                        sticky-header="500"
                        class="table-sm table-bordered text-nowrap prod-table" 
                        responsive
                        no-border-collapse
                        selected-variant="info"
                        selectable
                        select-mode="single"
                        @row-selected="prodSelect"
                        :items="prodData"
                        :fields="prodFields">
                        <template #cell(update)="row">
                            <b-link  class="button"  v-on:click="updateProduct(row.item.projId, row.item.prodId)">更新/削除</b-link> 
                            <!--b-button size="sm" @click="updateProduct(row.item.projId, row.item.prodId)">更新/削除</b-button-->
                        </template>   
                    </b-table > 
                         
                    <b-row align-h="end" class="my-0 print-hide">
                        <b-col class="col-md-10"/>
                        <b-col class="col-md-2">
                            <b-container class="d-flex justify-content-end">
                                <b-button @click="printProdTable" class="mr-0">ページ印刷</b-button>
                                <!-- b-button variant="primary" :disabled="!projSelected" @click="prodSearch">製品</b-button -->
                            </b-container>
                        </b-col>
                    </b-row>
                </div>
                <div v-if="isLoadingProd" class="text-center text-danger my-2">
                    <b-spinner class="align-middle"></b-spinner>
                    <strong>検索中...</strong>
                </div>   
            </b-card>       
        </div>        
       <b-alert class="mt-4" v-if="message" show variant="danger">{{ message }}</b-alert>   
    </div>  
</template>

<style scoped>
    #flexButton {
        margin-bottom: -2rem;
    }
    .button {
        font: 11px Arial;
        text-decoration: none;
        background-color: #7E7E7E; /* #817d7d; */
        color: #FFFFFF;
        padding: 4px 20px 4px 20px;
        border-top: 1px solid #CCCCCC;
        border-right: 1px solid #333333;
        border-bottom: 1px solid #333333;
        border-left: 1px solid #CCCCCC;
    }
    
    @media print {
        .print-hide {
            display: none;
        }
        .card {
            border: none;
        }
            
    }
    @page {
        size:auto;
        margin-top: 1rem;
    }
</style>

<script>
import axios from 'axios'
import apiUrls from '../../common/apiUrls'
import commonMethods from '../../common/commonMethods'
import compProjSearch from "@/components/compProjSearch.vue";

export default {
    components: {
        compProjSearch
    },
    
    data() {
        return {
            titleProj: '工事一覧',
            titleProd: '製品一覧',
            projInput: {
                projCode: '',
                projName: '',
                targetState:'',
                startDateBegin:'',
                endDateBegin:'',
                startDateComplete:'',
                endDateComplete:'',
                selectedRowProjId:''
            },
            projSettings: { maintenanceMode: true, addButtonMode:true },
            revertTableContent : false,
            //工事関連データ   
            prodSearchForm: {
                prodCode: '',
                prodName: ''
            },
            isShowProdSearch: false,
            isShowProjScreen: false,
            prodData: [],
            prodFields: [],
            prodFieldsCopy: [],
            project:[],
    
            message: '',
            time: this.getTime(),
            table_height: window.innerHeight - 360 + 'px',
            projSearchButtonCount: 0,
            isLoadingProd: false,
           // showDetail:false,  
            currentMenuName:'',
            classPrintHideProj: '',
            classPrintHideProd: '',
            resutltTitle:[],
            isShowProdTable:false,
            selectedRowProdId:'',
            // printing: false,
        }
    },
   
   created: function() {
        if(!this.$store.state.loginData.accessToken) {
            this.$router.push('/')
        }
        this.currentMenuName = commonMethods.getCurrentMenu();

        if(this.$store.state.responseData) {
            this.projInput.projCode = commonMethods.loadCommonArea(this.currentMenuName + "_ProjCode");
            this.projInput.projName = commonMethods.loadCommonArea(this.currentMenuName + "_ProjName");
            this.projInput.targetState = commonMethods.loadCommonArea(this.currentMenuName + "_TargetState");
            this.projInput.selectedRowProjId = commonMethods.loadCommonArea(this.currentMenuName + "_SelectedRowProjId");
            if (this.projInput.targetState && this.projInput.targetState == 2){
                this.projInput.startDateBegin = commonMethods.loadCommonArea(this.currentMenuName + "_StartDateBegin");
                this.projInput.endDateBegin = commonMethods.loadCommonArea(this.currentMenuName + "_EndDateBegin");
                commonMethods.deleteCommonArea(this.currentMenuName + "_StartDateBegin");
                commonMethods.deleteCommonArea(this.currentMenuName + "_EndDateBegin"); 
            }  
            else if (this.projInput.targetState && this.projInput.targetState == 4){ 
                this.projInput.startDateComplete = commonMethods.loadCommonArea(this.currentMenuName + "_StartDateComplete");
                this.projInput.endDateComplete = commonMethods.loadCommonArea(this.currentMenuName + "_EndDateComplete");
                commonMethods.deleteCommonArea(this.currentMenuName + "_StartDateComplete");
                commonMethods.deleteCommonArea(this.currentMenuName + "_EndDateComplete");
            }    
           // commonMethods.deleteCommonArea(this.currentMenuName + "_ProjInput");
            commonMethods.deleteCommonArea(this.currentMenuName + "_ProjCode");
            commonMethods.deleteCommonArea(this.currentMenuName + "_ProjName");
            commonMethods.deleteCommonArea(this.currentMenuName + "_TargetState");
            commonMethods.deleteCommonArea(this.currentMenuName + "_SelectedRowProjId");
        
            this.project = this.$store.state.responseData
            let savedProdCode = commonMethods.loadCommonArea(this.currentMenuName + '_ProdCode');
            let savedProdName = commonMethods.loadCommonArea(this.currentMenuName + '_ProdName');
            commonMethods.deleteCommonArea(this.currentMenuName + '_ProdCode');
            commonMethods.deleteCommonArea(this.currentMenuName + '_ProdName');
            this.selectedRowProdId = commonMethods.loadCommonArea(this.currentMenuName + '_SelectedProdId');
            commonMethods.deleteCommonArea(this.currentMenuName + '_SelectedProdId');
        
            if (savedProdCode){
               this.prodSearchForm.prodCode =  savedProdCode;
            }
            if (savedProdName){
               this.prodSearchForm.prodName = savedProdName;
            }
              
        }       
    },

    async mounted(){
        window.addEventListener('resize', () => {
            this.table_height = window.innerHeight - 360 + 'px'
        })  
      
        await this.$nextTick(); // waits for the component to load
    
        window.addEventListener('beforeprint', () => {
            if (this.classPrintHideProj != 'print-hide') {
                // 工事一覧コンポーネントの印刷ボタンがクリックされたときのみ処理を行う
                commonMethods.printDesingHandler('proj-table', true);
            }
            if (this.classPrintHideProd != 'print-hide') {
                // 製品一覧の印刷ボタンがクリックされたときのみ処理を行う
                commonMethods.printDesingHandler('prod-table', true);
            }
        })
        window.addEventListener('afterprint', () => {
            if (this.classPrintHideProj != 'print-hide') {
                this.revertTableContent = true;
                // 工事一覧コンポーネントの印刷ボタンがクリックされたときのみ処理を行う
                commonMethods.printDesingHandler('proj-table', false);
            }
             if (this.classPrintHideProd != 'print-hide') {
                // 製品一覧の印刷ボタンがクリックされたときのみ処理を行う
                this.prodFields = this.prodFieldsCopy;
                commonMethods.printDesingHandler('prod-table', false);
            }
        })
    },    
   
    methods: {
        emittedProjSelectedEvent(value) {
           // alert ("emittedProjSelectedEvent");
            if (value.projId){
              this.project = value;     
              this.isShowProdSearch = true;
              // alert (value.projId === this.projInput.selectedRowProjId);  
              if (this.projInput.selectedRowProjId && (value.projId != this.projInput.selectedRowProjId)){
                this.prodSearchForm.prodCode = '';
                this.prodSearchForm.prodName = '';
                commonMethods.saveCommonArea(this.currentMenuName + '_ProdCode', '');
                commonMethods.saveCommonArea(this.currentMenuName + '_ProdName', '');
              } 
              this.projInput.selectedRowProjId = value.projId;
              this.prodData = [];
            }else{
                this.project=[];
                this.isShowProdSearch = false;
            } 
            this.isShowProdTable = false;
            commonMethods.saveCommonArea(this.currentMenuName + '_ShowProduct' , this.isShowProdTable );
             

        },
        emittedProjPrintButtonEvent(value) {
            this.projSearchButtonCount = value;
            this.classPrintHideProd = 'print-hide';
            this.classPrintHideProj = '';
         //   this.revertTableContent = true;
        },

        searchData(data){
           // alert ("search data");
            this.projInput.projCode = data.projCode;
            this.projInput.projName = data.projName;
            this.projInput.targetState = data.targetState;
            this.projInput.startDateBegin = data.startDateBegin;
            this.projInput.endDateBegin = data.endDateBegin;
            this.projInput.startDateComplete = data.startDateComplete;
            this.projInput.endDateComplete = data.endDateComplete;
            this.message = "";
        },

        async emitSelctedProjId(selcetdRowProjId){
          //  alert ("emit search proj Id");
           this.selcetdRowProjId = selcetdRowProjId;

           this.isShowProdTable = false;
           if (!this.selcetdRowProjId){
               this.isShowProdSearch  = false;
           }else{
             var showProd = commonMethods.loadCommonArea(this.currentMenuName + '_ShowProduct');
             commonMethods.deleteCommonArea(this.currentMenuName + '_ShowProduct');
 
             if (!(showProd == null) && showProd == true && selcetdRowProjId){  
                await this.getProjData(selcetdRowProjId);

                let savedProdCode = commonMethods.loadCommonArea(this.currentMenuName + '_ProdCode');
                let savedProdName = commonMethods.loadCommonArea(this.currentMenuName + '_ProdName');
                commonMethods.deleteCommonArea(this.currentMenuName + '_ProdCode');
                commonMethods.deleteCommonArea(this.currentMenuName + '_ProdName');
           
                if (savedProdCode){
                    this.prodSearchForm.prodCode =  savedProdCode;
                }
                if (savedProdName){
                    this.prodSearchForm.prodName = savedProdName;
                }     
                if (this.prodSearchForm.prodCode || this.prodSearchForm.prodName){
                    this.getProductData();
                } else {
                    this.getProductData(1);
                } 
             }    
           } 
        },        

        emittedShowOtherData(val){
           this.isShowProdSearch = val;
        },

        projSearchButtonEvent(value) {
             this.projSearchButtonCount = value;
        },

        prodSelect(item) {
            if(item[0]) {
                this.selectedRowProdId = item[0].prodId;
            } 
        },

        async getProjData(projId){  
          console.log('Calling getProjData Method');
            let payload =  {
                projId:   projId
            }
            let axiosConfigObject = {
                headers: {
                    Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                    'Content-Type': 'application/json',
                },
                params:  payload}

            await axios.get(apiUrls.referProjectOne, axiosConfigObject).then(response => {    
                //console.log(response.data.resDt);
                if(response.data.resultCode != '000') {
                    this.message = commonMethods.getResponseMessage(response);
                }else{
                    var data = [] ;
                    data = response.data.resDt;
                    if (data){ 
                        this.project.projId = projId;
                        this.project.projCode = data[0].projCode;
                        this.project.projName = data[0].projName;
                       // alert ("this.project.projCode "+ this.project.projCode)
                    }          
                }
            })
            .catch(error => {
                this.message = commonMethods.getErrorMessage(error);
            })
        },

        async getProductData(mode) {
            if (mode) {  
                await this.getProjectProductList(1);
            } else {
                await this.getProjectProductList(); 
            }

            if (this.isShowProdTable != true) {
                return;
            }
            // console.log('getProductData !');
            // let titleProd = this.titleProd;
            // let frm = this.project;
            // let prodFields = this.prodFields;
            // commonMethods.sleep(100, 1, function () {
            //     //製品一覧テーブルのヘッダーを取得（documentが作成されるまで待機する必要がある）
            //     commonMethods.printPrepare('prod-table', prodFields.length, titleProd, `工事コード：${frm.projCode}、工事名称：${frm.projName}`);
            // });
        },

        async getProjectProductList(mode) {
           // alert ('Calling getProjectProductList Method');
            this.isLoadingProd = true;
            this.isShowProdTable = false;
            this.$store.state.searchForm = this.searchForm
            this.prodData=[];
            this.message = '';
            commonMethods.saveCommonArea(this.currentMenuName + '_ProdCode', this.prodSearchForm.prodCode);
            commonMethods.saveCommonArea(this.currentMenuName + 'ProdName', this.prodSearchForm.prodName);
            let payload = {}
            if (mode){
                payload = {
                   projCode:   this.project.projCode,
                   projName:   this.project.projName ,
                }
            } else {
                payload = {
                    projCode:   this.project.projCode,
                    projName:   this.project.projName ,
                    ...this.prodSearchForm.prodCode   && { prodCode:   this.prodSearchForm.prodCode },
                    ...this.prodSearchForm.prodName   && { prodName:   this.prodSearchForm.prodName }
                }
            }
             let axiosConfigObject = {
                headers: {
                    Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                    'Content-Type': 'application/json',
                },
                params:  payload}

            await axios.get(apiUrls.referProductMany, axiosConfigObject).then(response => {    
               // console.log(response.data.resDt);
                if(response.data.resultCode != '000') {
                    this.message = commonMethods.getResponseMessage(response);
                } else {
                    this.prodData = response.data.resDt;
                    // this.prodFields =  this.createFields(response.data.resDtTitle, [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]);
                    this.prodFields =  this.createFields(response.data.resDtTitle);
                }
                this.isShowProdTable = true;    
            })
            .catch(error => {
                this.message = commonMethods.getErrorMessage(error);
            })
            .finally(() => {
                this.isLoadingProd = false;
               // alert ("save this.isShowProdTable ==  " + this.isShowProdTable);
                commonMethods.saveCommonArea(this.currentMenuName + '_ShowProduct', this.isShowProdTable);   
                if (this.selectedRowProdId){
                    const row = this.prodData.findIndex(x => x.prodId === this.selectedRowProdId);
                    if ( row > -1){
                        this.$refs.tableRefProd.selectRow(row);
                        //scrolls down to the position of selected row
                        const tbody = this.$refs.tableRefProd.$el.querySelector('tbody');
                        const selectRow = tbody.querySelectorAll('tr')[row];
                       // selectRow.scrollIntoView(false);
                        selectRow.scrollIntoView({behavior: "smooth", block: "center", inline: "nearest"});
                    }else{
                        this.selectedRowProdId = "";
                    }    
                } 
            })         
        },

        printProdTable() {
            if (confirm('印刷プレビューをしますが、よろしいでしょうか？')) {
                // this.printing = true;
                this.prodFieldsCopy = [];
                this.prodFieldsCopy = this.prodFields;
                this.prodFields = this.prodFieldsCopy.filter(field => !field.required); 
     
                this.classPrintHideProj = 'print-hide';
                this.classPrintHideProd = '';
                let titleProd = this.titleProd;
                let frm = this.project;
                let prodFields = this.prodFields;
                commonMethods.sleep(100, 1, function () {
                    // 100ミリ秒*1回、待機後確認メッセージを表示
                    commonMethods.printPrepare('prod-table', prodFields.length, titleProd, `工事コード：${frm.projCode}、工事名称：${frm.projName}`);
                    // commonMethods.printDesingHandler('prod-table', true);
                    window.print();
                    // commonMethods.printDesingHandler('prod-table', false);
                });
            }          
        },

        aggregateProject() {
            this.message = "";
          //基本リクエストを作成する
            let payload = {
                transId: "",
                resultCode: null,
                resultMessage: null,
                user: null,
                terminal: null,
                reqDateTime: null,
                resDateTime: null,
                reqHd: {
                    projId: this.projInput.selectedRowProjId
                        
                },
            };
            let axiosConfigObject = {
                headers: {
                    Authorization: "Bearer " + this.$store.state.loginData.accessToken,
                    "Content-Type": "application/json",
                },
            };
            axios
                .post(apiUrls.projectAggregate, payload, axiosConfigObject).then((response) => {
                    if (response.data.resultCode != "000") {
                        this.message = commonMethods.getResponseMessage(response);
                    } else {
                        // this.$store.state.responseData = this.projectData;
                        alert(response.data.resultMessage);
                        //this.$router.push('productsearch')
                        // commonMethods.clickMenuBack();
                    }
            })
            .catch((error) => {
                //this.message = (error.response || {}).data;
                //console.log((error.response || {}).data);
                this.message = commonMethods.getErrorMessage(error);
            });
        },

        async getProductDetail(projId, prodId) {
            console.log('Calling getProductDetail Method');
            let payload =  {
                projId:   projId,
                prodId:   prodId
            }
            let axiosConfigObject = {
                headers: {
                    Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                    'Content-Type': 'application/json',
                },
                params:  payload}

            await axios.get(apiUrls.referProductOne, axiosConfigObject).then(response => {    
                //console.log(response.data.resDt);
                if(response.data.resultCode != '000') {
                    this.message = commonMethods.getResponseMessage(response);
                }else{
                    this.$store.state.responseData = response.data.resDt;
                }
            })
            .catch(error => {
                this.message = commonMethods.getErrorMessage(error);
            })
        },

        registerProduct(){
          //  commonMethods.saveCommonArea(this.currentMenuName + "_ProjInput", this.projInput);
            commonMethods.saveCommonArea(this.currentMenuName + "_ProjCode", this.projInput.projCode);
            commonMethods.saveCommonArea(this.currentMenuName + "_ProjName", this.projInput.projName);
            commonMethods.saveCommonArea(this.currentMenuName + "_TargetState", this.projInput.targetState);
            commonMethods.saveCommonArea(this.currentMenuName + "_SelectedRowProjId", this.projInput.selectedRowProjId);
            if (this.projInput.targetState && this.projInput.targetState == 2){
                commonMethods.saveCommonArea(this.currentMenuName + "_StartDateBegin", this.projInput.startDateBegin);
                commonMethods.saveCommonArea(this.currentMenuName + "_EndDateBegin", this.projInput.endDateBegin);
            }else if (this.projInput.targetState && this.projInput.targetState == 4){    
                commonMethods.saveCommonArea(this.currentMenuName + "_StartDateComplete", this.projInput.startDateComplete);
                commonMethods.saveCommonArea(this.currentMenuName + "_EndDateComplete", this.projInput.endDateComplete);
            }  

            commonMethods.saveCommonArea(this.currentMenuName + '_ProdCode', this.prodSearchForm.prodCode);
            commonMethods.saveCommonArea(this.currentMenuName + '_ProdName', this.prodSearchForm.prodName);
            commonMethods.saveCommonArea(this.currentMenuName + '_SelectedProdId', this.selectedRowProdId);
           /* if (this.prodData.length > 0){
               commonMethods.saveCommonArea(this.currentMenuName + '_ShowDetail', "1"); 
            }else{
               commonMethods.saveCommonArea(this.currentMenuName + '_ShowDetail', "0");  
            }*/
            this.$store.state.responseData = this.project;
            //this.$router.push('registerproduct')
            commonMethods.clickMenuForward(this.$route.path, 'registerproduct');
        },

        async updateProduct(projId, prodId){
            commonMethods.saveCommonArea(this.currentMenuName + "_ProjCode", this.projInput.projCode);
            commonMethods.saveCommonArea(this.currentMenuName + "_ProjName", this.projInput.projName);
            commonMethods.saveCommonArea(this.currentMenuName + "_TargetState", this.projInput.targetState);
            commonMethods.saveCommonArea(this.currentMenuName + "_SelectedRowProjId", this.projInput.selectedRowProjId);
            if (this.projInput.targetState && this.projInput.targetState == 2){
                commonMethods.saveCommonArea(this.currentMenuName + "_StartDateBegin", this.projInput.startDateBegin);
                commonMethods.saveCommonArea(this.currentMenuName + "_EndDateBegin", this.projInput.endDateBegin);
            }else if (this.projInput.targetState && this.projInput.targetState == 4){    
                commonMethods.saveCommonArea(this.currentMenuName + "_StartDateComplete", this.projInput.startDateComplete);
                commonMethods.saveCommonArea(this.currentMenuName + "_EndDateComplete", this.projInput.endDateComplete);
            }  

            commonMethods.saveCommonArea(this.currentMenuName + '_ProdCode', this.prodSearchForm.prodCode);
            commonMethods.saveCommonArea(this.currentMenuName + '_ProdName', this.prodSearchForm.prodName);
            commonMethods.saveCommonArea(this.currentMenuName + '_SelectedProdId', prodId);

            this.$store.state.responseData = this.project;

             await this.getProductDetail(projId, prodId);

            //this.$router.push('productupdate')
            commonMethods.clickMenuForward(this.$route.path, 'productupdate');
        },

        back() {
            this.isShowProjScreen = true;
            this.clearData(['proj', 'update']);
        },

        clearData(items) {
            this.message = '';
            items.forEach(element => {
                if(element === 'proj') {
                   
                    this.prodData = [];
                    this.prodFields = [];
                    this.prodSelectedItem = '';
                    this.prodSelected = [];
                }     
                if(element === 'update') {
                    this.prodSearchForm = {
                        prodCode: '',
                        prodName: ''
                    }
                }
            });
        },

        getNow() {
            let today = new Date(Date.now())
            //return today.toISOString().slice(0, 10);
            let diff = today.getTimezoneOffset() * 60 * 1000;    // -540 * 60 * 1000 = -32400000 (ミリ秒)
            let localToday = new Date(today - diff);
            return localToday.toISOString().slice(0, 10)
        },

        getTime() {
            let today = new Date(Date.now())
            return today.toTimeString().slice(0,8)
        },     

        //カラム作成・並べ替え関数
        createFields(obj, order) {
            let a = [];
            let b = [];
            for(let i in obj) { a.push( {'key': i, 'label': obj[i]} ); }
            if(order) {
                for(let i in order) { b.push(a[order[i]]); }
                return b;
            }
            a.push( {'key': 'update', 'label': '', 'required': 'true' } )
            return a;
        },

        resetProjForm() {
            this.prodSearchForm.prodCode = '';
            this.prodSearchForm.prodName = '';
        },  

    }
}
</script>
