<template>
  <div>
    <b-card bg-variant="light">
      <b-form>
        <b-container>
          <br />
          <b-form-row>
            <b-col class="col-md-5">
                <b-form-group label="工事名称" label-size="sm" class="mt-0 mb-0">
                   <b-form-select v-model="projName" :options="projNameOptions"  ></b-form-select>      
                </b-form-group>  
                <div><p style="color: #ff0000;" id="projNameError"></p> </div>
            </b-col>
          </b-form-row>
          <br />
          <b-form-row>
            <b-col class="col-md-5" :select-size="5">
              <b-form-group label="集計分類(親)コード" label-size="sm" class="mt-0 mb-0">
                   <b-form-select v-model="aggTypeCode" :options="aggTypeCodeOptions" @change="onChange1()" ></b-form-select>      
                </b-form-group> 
                <div><p style="color: #ff0000;" id="aggTypeCodeError"></p> </div> 
            </b-col>
             <b-col class="col-md-5" :select-size="5">
              <b-form-group label="集計分類(子)コード" label-size="sm" class="mt-0 mb-0">
                   <b-form-select v-model="aggTypeCodeChild" :options="aggTypeCodeChildOptions" @change="onChange2()" ></b-form-select>      
              </b-form-group> 
              <div><p style="color: #ff0000;" id="aggTypeCodeChildError"></p> </div>        
            </b-col> 
           
          </b-form-row> 
          <br/> 
          <br />
          <b-form-row> 
            <b-col class="col-md-5" :select-size="5">
                <b-form-group v-if="isLoadingaggUnitCode" label="集計単位(親)コード" label-size="sm" class="mt-0 mb-0" >
                   <b-form-select v-model="aggUnitCode" :options="aggUnitCodeOptions"  ></b-form-select>      
                </b-form-group> 
                <div v-if="isLoadingaggUnitCode"><p style="color: #ff0000;" id="aggUnitCodeError"></p> </div> 
            </b-col>
            <b-col class="col-md-5" :select-size="5">
                <b-form-group v-if="isLoadingaggUnitCodeChild" label="集計単位(子)コード" label-size="sm" class="mt-0 mb-0">
                  <b-form-checkbox-group
                    v-model="aggUnitCodeChild"
                    :options="aggUnitCodeChildOptions"
                     class="ml-4"
                    stacked
                  ></b-form-checkbox-group>
                </b-form-group>    
                <div><p style="color: #ff0000;" id="aggUnitCodeChildError"></p> </div>    
            </b-col>
           </b-form-row> 
         
          <!--div class="col-sm-10 offset-sm-2 text-center ">
            <b-form-row>
              <b-col class="col-md-3">
                <b-form-group label="工程一覧" label-size="sm" class="mt-0 mb-0">
                   <b-form-select id="select1" v-model="option1" :options="procCodeOptions" :select-size="select1Size"  style="height:100%" ></b-form-select>      
                </b-form-group>
               </b-col>
               <div class="btn-group-vertical item">
                 <button class="btn-xs btn-primary mb-2" @click="allToRight">&raquo;</button>
                 <button class="btn-xs btn-primary mb-2" @click="oneToRight">&rsaquo;</button>
                 <button class="btn-xs btn-primary mb-2" @click="oneToLeft">&lsaquo;</button>
                 <button class="btn-xs btn-primary" @click="allToLeft">&laquo;</button>
               </div> 
               <b-col class="col-md-3">
                 <b-form-group label="登録工程一覧" label-size="sm" class="mt-0 mb-0"> 
                   <b-form-select  id="select2" v-model="option2" :select-size="select2Size" :options="procCodeSelected"  style="height: 100%"></b-form-select>
                 </b-form-group>
               </b-col>    
            </b-form-row>
          </div -->
          <br/>
         
        </b-container>
      </b-form>
    </b-card>

    <b-alert v-if="message" show variant="danger">{{ message }}</b-alert>

    <div class="text-right mt-1">
      <b-button @click="registerAgg" class="mr-1">登録</b-button>
      <!--b-button variant="info" @click="backToProduct" to="/projects" class="mr-1">戻る</b-button-->
    </div>
  </div>
</template>

<style scoped>
 .item { 
   padding-left: 50px;
   padding-right: 50px;
   padding-top: 20px;
}
</style>

<script>
import axios from "axios";
import apiUrls from "../../common/apiUrls";
import commonMethods from '../../common/commonMethods'

 export default {
  data() {
    return {
      message: "",
      appTypeData: [],
      appUnitData: [],
      projName:"0",
      aggTypeCode:"0",
      aggUnitCode:"0",
      aggTypeCodeChild:"0",
      aggUnitCodeChild:[],
      projNameOptions: [],
      aggTypeCodeOptions: [],
      aggTypeCodeChildOptions: [],
      aggUnitCodeOptions: [],
      aggUnitCodeChildOptions : [],
      isLoadingaggUnitCode: false,
      isLoadingaggUnitCodeChild : false, 
      projNamePresent: false, 
      aggTypeCodePresent: false, 
      aggUnitCodePresent:false,
      aggTypeCodeChildPresent: false,
      aggUnitCodeChildPresent: false
    };
  },
  created: function() {
    if(!this.$store.state.loginData.accessToken) {
      this.$router.push('/');
    }
    this.getData();
  }, 
 
  methods: {     
    getNow() {
      let today = new Date(Date.now());
      return today.toISOString().slice(0, 10);
    },

    async onChange1(){  
      console.log(this.aggTypeCode) 
      this.aggUnitCodeOptions = []; 
      if (this.aggTypeCode === '0'){
         this.sLoadingaggUnitCode = false;
      }else{
         await this.getAggUnitListAll(this.aggTypeCode);
      }   
    },
    async onChange2(){
      if (this.projName  === '0'){  
          alert("工事名称をまず選択お願いします")
          this.aggTypeCodeChild="0";
      }else{   
      this.aggUnitCodeChildOptions = [];  
      if (this.aggTypeCodeChild === '0'){
        this.sLoadingaggUnitCode = false;
      }else {
        await this.getAggUnitListForProj(this.aggTypeCodeChild);
      }  
      } 
    },

    async getData(){
      await this.getProjectList();
      await this.getAggTypeList();
    },

    async getProjectList(){
      let axiosConfigObject = {
        headers: {
          Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
          'Content-Type': 'application/json',
        },
      }
      await axios.get(apiUrls.projectList, axiosConfigObject).then(response => {    
        if(response.data.resultCode != '000') {
          this.message = commonMethods.getResponseMessage(response);
        }else{
          this.projectData = response.data.resDt;
          this.projNameOptions.push({text:"工事を選択してください", value:"0"}) 
          for(var i = 0; i < this.projectData.length; i++){          
            this.projNameOptions.push({text:this.projectData[i].projName, value:this.projectData[i].projId});                             
          }
          console.log(this.projNameOptions);
        }
      })
      .catch(error => {
        this.message = commonMethods.getErrorMessage(error);
      })        
    },

    async getAggTypeList(){
      let axiosConfigObject = {
        headers: {
          Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
          'Content-Type': 'application/json',
        },
      }
      await axios.get(apiUrls.aggTypeList, axiosConfigObject).then(response => {    
        if(response.data.resultCode != '000') {
          this.message = commonMethods.getResponseMessage(response);
        }else{
          this.appTypeData = response.data.resDt;
          this.aggTypeCodeOptions.push({text:"集計分類(親)コードを選択してください", value:"0"}); 
          //this.aggTypeCodeOptions.push({text:"節", value:"setsu"}) ;
          this.aggTypeCodeChildOptions.push({text:"集計分類(親)コードを選択してください", value:"0"}) ;
          for(var i = 0; i < this.appTypeData.length; i++){          
            this.aggTypeCodeOptions.push({text:this.appTypeData[i].aggTypeName, value:this.appTypeData[i].aggTypeCode}); 
            this.aggTypeCodeChildOptions.push({text:this.appTypeData[i].aggTypeName, value:this.appTypeData[i].aggTypeCode});                            
          }
        }
      })
      .catch(error => {
        this.message = commonMethods.getErrorMessage(error);
      })        
    },

    async getAggUnitListAll(selectedAggTypeCode){
     
      let payload = {
            aggTypeCode:  selectedAggTypeCode
      }  
      let axiosConfigObject = {
        headers: {
          Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
          'Content-Type': 'application/json',
        },
        params:  payload
      }
      await axios.get(apiUrls.aggUnitListAll, axiosConfigObject).then(response => {    
        if(response.data.resultCode != '000') {
          this.message = commonMethods.getResponseMessage(response);
        }else{
          this.appUnitData = response.data.resDt;
            this.isLoadingaggUnitCode = true; 
            this.aggUnitCodeOptions.push({text:"集計単位(親)コードを選択してください", value:"0"}) 
          for(var i = 0; i < this.appUnitData.length; i++){  
                this.aggUnitCodeOptions.push({text:this.appUnitData[i].aggUnitName, value:this.appUnitData[i].aggUnitCode});
                                           
           }
        }
      })
      .catch(error => {
        this.message = commonMethods.getErrorMessage(error);
      })        
    },

    async getAggUnitListForProj(selectedAggTypeCode){ 
      let payload = {
            aggTypeCode:  selectedAggTypeCode,
            projId : this.projName
      }  
      let axiosConfigObject = {
        headers: {
          Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
          'Content-Type': 'application/json',
        },
        params:  payload
      }
      await axios.get(apiUrls.aggUnitList, axiosConfigObject).then(response => {    
        if(response.data.resultCode != '000') {
          this.message = commonMethods.getResponseMessage(response);
        }else{
          this.appUnitData = response.data.resDt;
            this.isLoadingaggUnitCodeChild = true;         
          for(var i = 0; i < this.appUnitData.length; i++){          
            this.aggUnitCodeChildOptions.push({text:this.appUnitData[i].aggUnitName, value:this.appUnitData[i].aggUnitCode});                                            
           }
        }
      })
      .catch(error => {
        this.message = commonMethods.getErrorMessage(error);
      })        
    },

    registerAgg(){
      this.message = "";
      this.checkInput();
        if (this.projNamePresent == true ){
          if (confirm("登録しますか？")) { 
            //基本リクエストを作成する
            let payload = {
              transId: "",
              resultCode: null,
              resultMessage: null,
              user: null,
              terminal: null,
              reqDateTime: null,
              resDateTime: null,
              reqHd: {
                projId: this.projName,
                aggTypeCodeParent: this.aggTypeCode,
                aggTypeCodeChild: this.aggTypeCodeChild,
                aggUnitCodeParent: this.aggUnitCode,
                aggUnitCodeChild : this.aggUnitCodeChild        
            },
        };
        console.log("-- payload  == " );
        console.log(payload);
      
        let axiosConfigObject = {
          headers: {
            Authorization: "Bearer " + this.$store.state.loginData.accessToken,
            "Content-Type": "application/json",
          },
        };
        axios.post(apiUrls.registerAggregate, payload, axiosConfigObject).then((response) => {
            if (response.data.resultCode != "000") {
              this.message = commonMethods.getResponseMessage(response);
            } else {
              alert(response.data.resultMessage);
              this.$store.state.responseData = "";
             // this.$router.push("aggregate");
              commonMethods.clickMenuForward(this.$route.path, 'aggregate');
            }
          })
          .catch((error) => {
             this.message = commonMethods.getErrorMessage(error);
          }); 
        }  
      }
    },
  
    checkInput() {
      var text1 = "";
      if (this.projName  === '0') {
        text1 = "工事名称を選択してください";
        this.projNamePresent = false;
      } else{
        text1 = "";
        this.projNamePresent = true; 
      }
      document.getElementById("projNameError").innerHTML = text1;
     
      text1 = "";
      if (this.aggTypeCode  === '0') {
        text1 = "集計分類(親)コードを選択してください";
        this.aggTypeCodePresent = false;
      } else{
        text1 = "";
        this.aggTypeCodePresent = true; 
      }
      document.getElementById("aggTypeCodeError").innerHTML = text1;

      if (this.isLoadingaggUnitCode){
        text1 = "";  
        if (this.aggUnitCode  === '0') {
          text1 = "集計単位(親)コードを選択してください";
          this.aggUnitCodePresent = false;
        } else{
          text1 = "";
          this.aggUnitCodePresent = true; 
        }
        document.getElementById("aggUnitCodeError").innerHTML = text1;
      } 

      text1 = "";
      if (this.aggTypeCodeChild  === '0') {
        text1 = "集計分類(子)コードを選択してください";
        this.aggTypeCodeChildPresent = false;
      } else{
        text1 = "";
        this.aggTypeCodeChildPresent = true; 
      }
      document.getElementById("aggTypeCodeChildError").innerHTML = text1;

      if (this.isLoadingaggUnitCodeChild){
        text1 = "";  
        if (this.aggUnitCodeChild.length == 0) {
          text1 = "集計単位(子)コードを選択してください";
          this.aggUnitCodeChildPresent = false;
        } else{
          text1 = "";
          this.aggUnitCodeChildPresent = true; 
        }
        document.getElementById("aggUnitCodeChildError").innerHTML = text1;
      } 

    },
    
  },
};
</script>