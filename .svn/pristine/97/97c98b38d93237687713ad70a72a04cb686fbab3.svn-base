<template>
  <div>
    <b-card bg-variant="light">
      <b-form>
        <b-container >

          <div  style=" display: inline-block">    
            <br />
            <b-form-row align-v="center">      
              <b-form-group label="工事名称:" label-cols-sm="5">
                <b-form-select v-model="projId" :options="projNameOptions" @change="onChangeProjSelect()" ></b-form-select>         
              </b-form-group>  
              <!--b-form-group label="取込NO:" label-cols-sm="5">
                <b-form-input v-model="importNo" disabled></b-form-input>         
              </b-form-group-->  
            </b-form-row>
            <div><p style="color: #ff0000;" id="projNameError"></p> </div>
            <br /> 
            <br /> 
          </div> 

          <div v-if="isProjectNamePresent"  >
           <b-row class="justify-content-md-center">
             <b-col col lg="2">
               <table >  
                  <tr>
                   <td> <label>集計分類(親)コード:</label> </td>
                  </tr>
                  <tr>
                    <td> <b-form-select v-model="aggTypeCode" :options="aggTypeCodeOptions" @change="onChange1()" ></b-form-select> </td>
                  </tr>
                  <tr>
                    <td> <div><p style="color: #ff0000;" id="aggTypeCodeError"></p> </div>   </td>
                  </tr> 
                
                   <tr>
                     <td> <label style="font-size:14px;">集計単位(親)コードを選択してください:</label> </td> 
                   </tr>  
                  <tr>
                    <td>
                      <div id="table-scroll">
                        <table class="table-sm table-bordered text-nowrap"> 
                         <thead>
                          <tr> <th class="highlight" style="height:35px; padding: 10px;" colspan="2"> 集計分類コード  |  集計分類名 </th> </tr>
                         </thead>
                         <tbody>
                          <tr v-for="(item, value) in aggUnitCodeOptions"  @click="selectRow(item.value)" :key="value" :class="{'highlightLight': (item.value === aggUnitCode)}">
                            <td style="height:33px"> <label><input type="hidden" v-model="aggUnitCode"></label>{{item.value}} </td>
                            <td>{{item.text}} </td>
                          </tr> 
                         </tbody>
                        </table>  
                      </div>
                   </td>  
                  </tr>
                  <tr>
                    <td> <div><p style="color: #ff0000;" id="aggUnitCodeError"></p> </div>   </td>
                  </tr> 
                  <br/>
                  <!--tr>  
                    <td><b-button id="add_aggUnitCode"  v-b-modal.aggUnitCode_modal>集計単位(親)コード登録</b-button></td>
                  </tr-->
               
              </table> 
              
             </b-col>

              <b-col cols="10" lg="2">
                 <table > 
                  
                   <tr>
              <div style=" padding-top:80px;">
                <b-button  v-b-modal.std_aggunit_modal @click="addStdAgg()" class="mr-1">集計単位(親)コード登録</b-button>
              </div>
     </tr>
     
      <b-modal
        id="std_aggunit_modal"
        title="集計単位(親)コード登録"
        @show="resetModal"
        @ok="addtoAggUnit">
             <b-form>
                <div id="table-scroll" v-if="isLoadingStdAggUnitCode">
                <table class="table-sm table-bordered text-nowrap" style="width:100%;"> 
                  <!--tr >
                    <th style="height:30px"><b-button @click="addtoAggUnit()"  > ADD </b-button></th>
                    <th style="height:30px"><b-button @click="close()" > CLOSE </b-button></th> 
                  </tr-->  
                  <tr>
                    <th class="highlight" style="height:30px; width:" > <label><input type="checkbox" :value=0 v-model="stdUnitCodes" disabled ></label></th>
                    <th class="highlight" style="height:30px" >  単位コード  </th>
                    <th class="highlight" style="height:30px" >  単位名称  </th>
                  </tr>        
                  <tr v-for="(item, value) in aggStdUnitCodeOptions"  :key="value">     
                    <td> <label><input type="checkbox" :value="item.value" v-model="stdUnitCodes"></label></td> 
                    <td>{{item.value}} </td>
                    <td>{{item.text}} </td>     
                  </tr>
                </table> 
              </div>  
                <!--label for="proj_code">物件コード</label>
                <b-form-input id="proj_code" v-model="proj_code"/>
                <label for="proj_name">物件名称</label>
                <b-form-input id="proj_name" v-model="proj_name"/ -->
            </b-form>
        </b-modal>
     
      
     <!--tr>
              <div id="table-scroll" v-if="isLoadingStdAggUnitCode">
                <table class="table-sm table-bordered text-nowrap"> 
                  <tr >
                      <th style="height:30px"><b-button @click="addtoAggUnit()"  > ADD </b-button></th>
                      <th style="height:30px"><b-button @click="close()" > CLOSE </b-button></th> 
                    </tr>          
                  <tr v-for="(item, value) in aggStdUnitCodeOptions"  :key="value">
                      <template v-if="item.value === '0'">
                        <th class="highlight" style="height:30px" > <label><input type="checkbox" :value="item.value" v-model="stdUnitCodes" disabled ></label></th>
                        <th class="highlight" style="height:30px" colspan="2"> {{item.text}} </th>
                      </template>  
                      <template v-else>
                          <td> <label><input type="checkbox" :value="item.value" v-model="stdUnitCodes"></label></td> 
                          <td>{{item.value}} </td>
                          <td>{{item.text}} </td>
                      </template>
                  </tr>
                    
               
                </table> 
              </div>  
              </tr !--> 
                 </table> 
              </b-col>      
             
             <!--b-col cols="16" md="auto" class="col-md-1"></b-col -->
             <b-col col lg="2">
               <table > 
                  <tr>
                    <td> <label>集計分類(子)コード:</label> </td>
                  </tr>
                  <tr>
                    <td><b-form-select v-model="aggTypeCodeChild" :options="aggTypeCodeChildOptions" @change="onChange2()" ></b-form-select>   </td>
                  </tr>
                  <tr>
                    <td> <div><p style="color: #ff0000;" id="aggTypeCodeChildError"></p> </div>   </td>
                  </tr> 
                  <div  v-if="isLoadingaggUnitCodeChild">
                   <tr>
                     <td> <label style="font-size:14px;">集計単位(子)コードを選択してください:</label> </td> 
                   </tr>
                   <tr>  
                    <td>
                      <div id="table-scroll">
                      <table class="table-sm table-bordered text-nowrap">           
                         <tr v-for="(item, value) in aggUnitCodeChildOptions"  :key="value">
                           <template v-if="item.value === '0'">
                             <th class="highlight" style="height:30px" > <label><input type="checkbox" :value="item.value" v-model="aggUnitCodeChild" disabled ></label></th>
                             <th class="highlight" style="height:30px" colspan="2"> {{item.text}} </th>
                           </template>  
                           <template v-else>
                             <td> <label><input type="checkbox" :value="item.value" v-model="aggUnitCodeChild"></label></td> 
                             <td>{{item.value}} </td>
                             <td>{{item.text}} </td>
                           </template>
                         </tr> 
                       </table> 
                      </div>    
                     </td>
                    </tr>
                   </div>
                 <tr>
                   <td> <div><p style="color: #ff0000;" id="aggUnitCodeChildError"></p> </div>   </td>
                 </tr>
                 <!--tr>   
                   <td><b-button id="add_aggUnitCode"  v-b-modal.aggUnitCode_modal>集計単位(子)コード登録</b-button></td>       
                 </tr--> 
                
              </table> 
             </b-col>
           </b-row> 
          </div>

        
        </b-container>
      </b-form>
    </b-card>
    <b-alert v-if="message" show variant="danger">{{ message }}</b-alert>
    <div class="text-right mt-1" v-if="isProjectNamePresent">
      <b-button @click="registerAgg" class="mr-1">登録</b-button>
      <!--b-button variant="info" @click="backToProduct" to="/projects" class="mr-1">戻る</b-button-->
    </div>
  </div>
</template>

<style scoped>

#table-scroll {
  height:300px;
  overflow:auto;  
  margin-top:20px;
  border: 1px solid black;
}

.highlight {
  background-color: darkgray;
}

.highlightLight {
  background-color: lightgray;
}
tr:hover{
  cursor: pointer;
}

#add_aggUnitCode {
  margin-bottom: 1rem;
}
th {
  position: sticky;
  top: 0; /* Don't forget this, required for the stickiness */
}

tr:first-child, second-child {
  position: sticky;
  top: 0;
  z-index: 2;
}

</style>

<script>
import axios from "axios";
import apiUrls from "../../common/apiUrls";
import commonMethods from '../../common/commonMethods'

 export default {
  data() {
    return {
      message: "",
      appTypeData: [],
      appUnitData: [],
      projId:"0",
      aggTypeCode:"setsu",
      aggUnitCode:"",
      aggTypeCodeChild:"0",
      importNo:0,
      aggUnitCodeChild:[],
      projNameOptions: [],
      aggTypeCodeOptions: [],
      aggTypeCodeChildOptions: [],
      aggUnitCodeOptions: [],
      aggUnitCodeChildOptions : [],
      aggStdUnitCodeOptions: [],
      stdAggUnitData: [],
      stdUnitCodes: [],
      childData:[],
      isProjectNamePresent: false,
      isLoadingaggUnitCode: true,
      isLoadingaggUnitCodeChild : false,
      isLoadingStdAggUnitCode: false, 
      projNamePresent: false, 
      aggTypeCodePresent: false, 
      aggUnitCodePresent:false,
      aggTypeCodeChildPresent: false,
      aggUnitCodeChildPresent: false,
      new_agg_type_code:"",
      new_agg_unit_code:"",
      new_agg_unit_name:"",
    };
  },

  created: function() {
    if(!this.$store.state.loginData.accessToken) {
      this.$router.push('/');
    }
    this.getData();
  }, 
 
  methods: { 

    getNow() {
      let today = new Date(Date.now());
      return today.toISOString().slice(0, 10);
    },

    async selectRow(aggUnitCode){
      console.log(aggUnitCode);
      this.aggUnitCode = aggUnitCode;  
      if (this.aggUnitCode != '0' && this.aggTypeCodeChild != '0'){
        this.getChildUnitCodesFromDB();
      } 
    },

    async onChangeProjSelect(){
       if (this.projId === '0'){
         this.isProjectNamePresent = false;
       } else{
          this.isProjectNamePresent = true; 
          await this.getAggUnitListAll(this.projId,"setsu");
          if (this.aggUnitCode != '0' && this.aggTypeCodeChild != '0'){
             this.getChildUnitCodesFromDB();
          }
       }    
    },

    async addtoAggUnit(){
     // this.$wait.start('my list is to load');
      await this.addtoAggUnitTable();
    //  this.$wait.end('my list is to load');
      console.log(this.projId + " Before calling  getAggUnitListAll " + this.aggTypeCode);

    //  await this.getAggUnitListAll(this.projId,this.aggTypeCode);
    },

    async addtoAggUnitTable(){
       console.log ("Entered addtoAggUnit");
       let payload = {
              transId: "",
              resultCode: null,
              resultMessage: null,
              user: null,
              terminal: null,
              reqDateTime: null,
              resDateTime: null,
              reqHd: {
                 projId: this.projId,
                 aggTypeCode: this.aggTypeCode,
                 aggUnitCode: this.stdUnitCodes,
                 importNo: this.importNo     
            },
           }; 
           let axiosConfigObject = {
             headers: {
                Authorization: "Bearer " + this.$store.state.loginData.accessToken,
                "Content-Type": "application/json",
             },
           };
           console.log (payload);
           axios.post(apiUrls.registerStdUnitToAggUnit, payload, axiosConfigObject).then((response) => {
            if (response.data.resultCode != "000") {
              this.message = commonMethods.getResponseMessage(response);
            } else {
              alert(response.data.resultMessage);
              this.stdUnitCodes = [];
              this.getAggUnitListAll(this.projId,this.aggTypeCode);
              return;
             // this.$store.state.responseData = "";
             // commonMethods.clickMenuForward(this.$route.path, 'aggregate');
            }
           })
          .catch((error) => {
            this.message = commonMethods.getErrorMessage(error);
           }); 
         
    },
  
   /* async addtoAggunit(){
      
      let payload = {
        projId: this.projId,
        aggTypeCode: this.aggTypeCode,
        aggUnitCode: this.stdUnitCodes,
        importNo: 0   
      }        
      console.log ("addToAggUnit this.payLoad ==  " + this.projId + " " + this.aggTypeCode + " " + this.stdUnitCodes);
      let axiosConfigObject = {
        headers: {
          Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
          'Content-Type': 'application/json',
        },
        params:  payload
      }
      await axios.get(apiUrls.registerStdUnitToAggUnit, axiosConfigObject).then(response => {    
        if(response.data.resultCode != '000') {
          this.message = commonMethods.getResponseMessage(response);
        }else{
          alert(response.data.resultMessage);     
        }
      })
      .catch(error => {
        this.message = commonMethods.getErrorMessage(error);
      })
     // await this.getAggUnitListAll(this.projId,this.aggTypeCode);     
    }, */

    async resetModal(){
      this.isLoadingStdAggUnitCode = false;
    },

    async getChildUnitCodesFromDB(){
      let payload = {
        projId: this.projId,
        aggTypeCode: this.aggTypeCode,
        aggUnitCode: this.aggUnitCode ,
        aggTypeCodeChild: this.aggTypeCodeChild   
      }    
      let axiosConfigObject = {
        headers: {
          Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
          'Content-Type': 'application/json',
        },
        params:  payload
      }
      await axios.get(apiUrls.getChildInfo, axiosConfigObject).then(response => {    
        if(response.data.resultCode != '000') {
          this.message = commonMethods.getResponseMessage(response);
        }else{
          this.aggUnitCodeChild = [];
          this.childData = [];
          this.childData = response.data.resDt;
           for(var i = 0; i < this.childData.length; i++){          
            this.aggUnitCodeChild.push(this.childData[i].aggUnitChiCode);                             
          }
          console.log(this.aggUnitCodeChild);
        }
      })
      .catch(error => {
        this.message = commonMethods.getErrorMessage(error);
      })        
    },

    async onChange1(){  
      console.log(this.aggTypeCode) 
      this.aggUnitCodeOptions = []; 
      if (this.projId === '0'){
         this.isProjectNamePresent = false;
         alert("工事名称をまず選択お願いします") 
      }else{    
        if (this.aggTypeCode === '0'){
          this.sLoadingaggUnitCode = false;
        }else{
          await this.getAggUnitListAll(this.projId,this.aggTypeCode);
          if (this.isLoadingStdAggUnitCode){
            await this.addStdAgg();
          }
        } 
      }   
    },

    async onChange2(){
      if (this.projId  === '0'){  
        alert("工事名称をまず選択お願いします")
        this.aggTypeCodeChild="0";
      }else{   
        this.aggUnitCodeChildOptions = [];  
        if (this.aggTypeCodeChild === '0'){
           this.isLoadingaggUnitCodeChild = false;
        }else {
          console.log ("AGGTYPECODECHILD == " + this.aggTypeCodeChild);
           await this.getAggUnitListForProj(this.aggTypeCodeChild);
           this.isLoadingaggUnitCodeChild = true;
           if (this.aggUnitCode != "0"){
            await this.getChildUnitCodesFromDB();
           }
        }  
      } 
    },

    async getData(){
      await this.getProjectList();
      await this.getAggTypeList();
    },

    async getProjectList(){
      let axiosConfigObject = {
        headers: {
          Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
          'Content-Type': 'application/json',
        },
      }
      await axios.get(apiUrls.projectList, axiosConfigObject).then(response => {    
        if(response.data.resultCode != '000') {
          this.message = commonMethods.getResponseMessage(response);
        }else{
          this.projectData = response.data.resDt;
          this.projNameOptions.push({text:"工事を選択してください", value:"0"}) 
          for(var i = 0; i < this.projectData.length; i++){          
            this.projNameOptions.push({text:this.projectData[i].projName, value:this.projectData[i].projId});                             
          }
          console.log(this.projNameOptions);
        }
      })
      .catch(error => {
        this.message = commonMethods.getErrorMessage(error);
      })        
    },

    async getAggTypeList(){
      let axiosConfigObject = {
        headers: {
          Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
          'Content-Type': 'application/json',
        },
      }
      await axios.get(apiUrls.aggTypeList, axiosConfigObject).then(response => {    
        if(response.data.resultCode != '000') {
          this.message = commonMethods.getResponseMessage(response);
        }else{
          this.appTypeData = response.data.resDt;
        //  this.aggTypeCodeOptions.push({text:"集計分類(親)コードを選択してください", value:"0"}); 
          //this.aggTypeCodeOptions.push({text:"節", value:"setsu"}) ;
          this.aggTypeCodeChildOptions.push({text:"集計分類(親)コードを選択してください", value:"0"}) ;
          for(var i = 0; i < this.appTypeData.length; i++){ 
            this.aggTypeCodeOptions.push({text:this.appTypeData[i].aggTypeName, value:this.appTypeData[i].aggTypeCode}); 
            this.aggTypeCodeChildOptions.push({text:this.appTypeData[i].aggTypeName, value:this.appTypeData[i].aggTypeCode});                            
          }
        }
      })
      .catch(error => {
        this.message = commonMethods.getErrorMessage(error);
      })        
    },
    
     //集計単位(親)コード
    async addStdAgg(){  
      console.log(this.projId);
      let payload = {
          projId : this.projId,
          aggTypeCode: this.aggTypeCode 
      }   
      console.log ("PAYLOAD addStdAgg " +  payload);
      let axiosConfigObject = {
        headers: {
          Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
          'Content-Type': 'application/json',
        },
        params:  payload
      }
      await axios.get(apiUrls.referStdAggUnitMany, axiosConfigObject).then(response => {    
        if(response.data.resultCode != '000') {
          this.message = commonMethods.getResponseMessage(response);
        }else{
          this.aggStdUnitCodeOptions = [];
          this.stdAggUnitData = response.data.resDt;
          this.isLoadingStdAggUnitCode = true; 
          if (this.stdAggUnitData.length > 0){   
           // this.aggStdUnitCodeOptions.push({text:"単位コード | 単位名称", value:"0"});
            for(var i = 0; i < this.stdAggUnitData.length; i++){ 
              this.aggStdUnitCodeOptions.push({text:this.stdAggUnitData[i].aggUnitName, value:this.stdAggUnitData[i].aggUnitCode});                                   
            }
          }else{
            this.aggStdUnitCodeOptions.push({text:"No Data", value:"0"});
          }  
        }
      })
      .catch(error => {
        this.message = commonMethods.getErrorMessage(error);
      })        
    },

    //集計単位(親)コード
    async getAggUnitListAll(projId,selectedAggTypeCode){  
      let payload = {
            projId:     projId,
            aggTypeCode:  selectedAggTypeCode
      } 
      
      console.log ("getAggUnitListAll PAYLOAD " + payload);
      let axiosConfigObject = {
        headers: {
          Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
          'Content-Type': 'application/json',
        },
        params:  payload
      }
      await axios.get(apiUrls.referAggUnitMany, axiosConfigObject).then(response => {    
        if(response.data.resultCode != '000') {
          this.message = commonMethods.getResponseMessage(response);
        }else{
          this.aggUnitCodeOptions = [];
          this.appUnitData = [];
          this.appUnitData = response.data.resDt;
          this.isLoadingaggUnitCode = true; 
         // this.aggUnitCodeOptions.push({text:"集計単位(親)コードを選択してください", value:"0"}) 
          for(var i = 0; i < this.appUnitData.length; i++){ 
            this.aggUnitCodeOptions.push({text:this.appUnitData[i].aggUnitName, value:this.appUnitData[i].aggUnitCode});                                   
          }
        }
      })
      .catch(error => {
        this.message = commonMethods.getErrorMessage(error);
      })        
    },

    async getAggUnitListForProj(selectedAggTypeCode){ 
      this.aggUnitCodeChildOptions = [];
      let payload = {
            aggTypeCode:  selectedAggTypeCode,
            projId : this.projId
      }  
      let axiosConfigObject = {
        headers: {
          Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
          'Content-Type': 'application/json',
        },
        params:  payload
      }
      await axios.get(apiUrls.aggUnitList, axiosConfigObject).then(response => {    
        if(response.data.resultCode != '000') {
          this.message = commonMethods.getResponseMessage(response);
        }else{
          this.appUnitData = [];
          this.aggUnitCodeChildOptions = [];
          this.appUnitData = response.data.resDt;
          this.isLoadingaggUnitCodeChild = true;  
         // this.aggUnitCodeChildOptions.push({text:"集計単位(子)コードを選択してください", value:"0"})
          this.aggUnitCodeChildOptions.push({text:"集計単位コード | 集計単位名称", value:"0"});
          for(var i = 0; i < this.appUnitData.length; i++){        
            this.aggUnitCodeChildOptions.push({text: this.appUnitData[i].aggUnitName, value:this.appUnitData[i].aggUnitCode}); 
          // this.aggUnitCodeChildOptions.push({"集計単位(子)コード":this.appUnitData[i].aggUnitName}) ;                                          
          }
        }
      })
      .catch(error => {
        this.message = commonMethods.getErrorMessage(error);
      })        
    },

    registerAgg(){
      this.message = "";
      this.checkInput();
        if (this.projNamePresent == true && this.aggTypeCodePresent &&  this.aggUnitCodePresent && this.aggTypeCodeChildPresent && this.aggUnitCodeChildPresent){
          if (confirm("登録しますか？")) { 
            //基本リクエストを作成する
            let payload = {
              transId: "",
              resultCode: null,
              resultMessage: null,
              user: null,
              terminal: null,
              reqDateTime: null,
              resDateTime: null,
              reqHd: {
                projId: this.projId,
                aggTypeCodeParent: this.aggTypeCode,
                aggTypeCodeChild: this.aggTypeCodeChild,
                aggUnitCodeParent: this.aggUnitCode,
                aggUnitCodeChild : this.aggUnitCodeChild,  
                importNo: this.importNo    
            },
           }; 
           let axiosConfigObject = {
             headers: {
                Authorization: "Bearer " + this.$store.state.loginData.accessToken,
                "Content-Type": "application/json",
             },
           };
           axios.post(apiUrls.registerAggregate, payload, axiosConfigObject).then((response) => {
            if (response.data.resultCode != "000") {
              this.message = commonMethods.getResponseMessage(response);
            } else {
              alert(response.data.resultMessage);
             // this.$store.state.responseData = "";
             // commonMethods.clickMenuForward(this.$route.path, 'aggregate');
            }
           })
          .catch((error) => {
            this.message = commonMethods.getErrorMessage(error);
           }); 
         }  
       }
     },

   /* async add_aggUnitCode_modal(){
       console.log(" Inside add_aggUnitCode_modal method ");
       console.log (this.new_agg_type_code);
       console.log (this.new_agg_unit_code);
       console.log (this.new_agg_unit_name);
       if (confirm("登録しますか？")) { 
          //基本リクエストを作成する
            let payload = {
              transId: "",
              resultCode: null,
              resultMessage: null,
              user: null,
              terminal: null,
              reqDateTime: null,
              resDateTime: null,
              reqHd: {
                aggTypeCode: this.new_agg_type_code,
                aggUnitCode: this.new_agg_unit_code,
                aggUnitName: this.new_agg_unit_name
              },
           };
        
           let axiosConfigObject = {
             headers: {
               Authorization: "Bearer " + this.$store.state.loginData.accessToken,
               "Content-Type": "application/json",
             },
           };
           axios.post(apiUrls.insertStdAggUnit, payload, axiosConfigObject).then((response) => {
              if (response.data.resultCode != "000") {
                this.message = commonMethods.getResponseMessage(response);
              } else {
                alert(response.data.resultMessage);
                this.$store.state.responseData = "";
                this.new_agg_type_code = "";
                this.new_agg_unit_code = "";
                this.new_agg_unit_name = "";  
             // this.$router.push("aggregate");
             // commonMethods.clickMenuForward(this.$route.path, 'aggregate');
              }
            })
            .catch((error) => {
              this.message = commonMethods.getErrorMessage(error);
            })
            .finally(() => {
               this.getAggUnitListAll(this.projId,this.aggTypeCode);
               if (this.aggTypeCodeChild){
                this.getAggUnitListForProj(this.aggTypeCodeChild);
               } 
            })    
        }  
    },*/
  
    checkInput() {
      var text1 = "";
      if (this.projId  === '0') {
        text1 = "工事名称を選択してください";
        this.projNamePresent = false;
      } else{
        this.projNamePresent = true; 
      }
      document.getElementById("projNameError").innerHTML = text1;
     
      var text2 = "";
      if (this.aggTypeCode  === '0') {
        text2 = "集計分類(親)コードを選択してください";
        this.aggTypeCodePresent = false;
      } else{
        this.aggTypeCodePresent = true; 
      }
      document.getElementById("aggTypeCodeError").innerHTML = text2;

     // if (this.isLoadingaggUnitCode){
       var text3 = ""; 
        console.log (this.aggUnitCode) ;
        if (this.aggUnitCode  == "0") {
          text3 = "集計単位(親)コードを選択してください";
          this.aggUnitCodePresent = false;
        } else{
           this.aggUnitCodePresent = true; 
        }
        console.log (this.aggUnitCodePresent);
        console.log (text3);
        document.getElementById("aggUnitCodeError").innerHTML = text3;
     // } 

      var text4 = "";
      if (this.aggTypeCodeChild  === '0' ) {
        text4 = "集計分類(子)コードを選択してください";
        this.aggTypeCodeChildPresent = false;
      } else{
        this.aggTypeCodeChildPresent = true; 
      }
      document.getElementById("aggTypeCodeChildError").innerHTML = text4;

      if (this.isLoadingaggUnitCodeChild){
        var text5 = "";  
        if (this.aggUnitCodeChild.length == 0) {
          text5 = "集計単位(子)コードを選択してください";
          this.aggUnitCodeChildPresent = false;
        } else{
          this.aggUnitCodeChildPresent = true; 
        }
        document.getElementById("aggUnitCodeChildError").innerHTML = text5;
      } 

    },
    
  },
};
</script>