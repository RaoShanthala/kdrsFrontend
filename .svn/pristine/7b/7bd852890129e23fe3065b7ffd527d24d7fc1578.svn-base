<template>
        <div v-if="isShowProjChoice">
            <b-card bg-variant="light"  :class="classPrintHideProj" height="100px">
                <b-row class="print-hide">
                    <!--b-col class="col-md-2 print-hide" -->
                    <b-col>
                        <h4 class="mb-3">{{ titleProj }}</h4>
                    </b-col>
                    <b-col class="col-md-10">
                        <b-form inline class="mt-0">
                            <b-form-group label="工事コード" class="mr-3">
                                <b-form-input id="projCode" v-model="projSearchForm.projCode"/>
                            </b-form-group>
                            <b-form-group label="工事名称" class="mr-3">
                                <b-form-input id="projName" v-model="projSearchForm.projName"/>
                            </b-form-group>
                            <b-form-group class="mt-5 mb-4 mr-3">
                                <b-form-radio-group v-model="projStatus" :options="projStatusOptions"/>
                            </b-form-group>
                            <b-form-group v-if="projStatus==1" label="工事着手日From" class="mt-3 mr-3">
                                <b-datepicker today-button reset-button close-button
                                    label-today-button="今日" label-reset-button="クリア" label-close-button="キャンセル"
                                    placeholder="日付を選択してください" v-model="projSearchForm.startDateBegin"/>
                            </b-form-group>
                            <b-form-group v-if="projStatus==1" label="工事着手日To" class="mt-3 mr-3">
                                <b-datepicker today-button reset-button close-button
                                    label-today-button="今日" label-reset-button="クリア" label-close-button="キャンセル"
                                    placeholder="日付を選択してください" v-model="projSearchForm.endDateBegin"/>
                            </b-form-group>
                            <b-form-group  v-if="projStatus==3" label="工事完了日From" class="mt-3 mr-3">
                                <b-datepicker today-button reset-button close-button
                                    label-today-button="今日" label-reset-button="クリア" label-close-button="キャンセル"
                                    placeholder="日付を選択してください" v-model="projSearchForm.startDateComplete"/>
                            </b-form-group>
                            <b-form-group v-if="projStatus==3" label="工事完了日To" class="mt-3 mr-3">
                                <b-datepicker today-button reset-button close-button
                                    label-today-button="今日" label-reset-button="クリア" label-close-button="キャンセル"
                                    placeholder="日付を選択してください" v-model="projSearchForm.endDateComplete"/>
                            </b-form-group>
                            <b-form-group v-if="projStatus==1 || projStatus==3" class="mt-5 mr-1">
                                <b-button @click="projSearchClick">検索</b-button>
                            </b-form-group>
                            <b-form-group v-if="!(projStatus==1 || projStatus==3)" class="mt-4 mr-1">
                                <b-button @click="projSearchClick" class="mr-1">検索</b-button>
                                <b-button variant="outline-primary" @click="resetProjSearchForm">クリア</b-button>
                            </b-form-group>
                        </b-form>
                    </b-col>
                </b-row>
                <!--/b-card -->

                <!-- b-row align-h="end" class="my-1 print-hide">
                    <b-button to="/menu" variant="info">戻る</b-button>
                </b-row -->

                <div v-if="isShowProjTable" :class="classPrintHideProj">
                    <!-- p class="print-hide">工事を選択してください（ダブルクリック可）</p -->
                    <!-- p class="print-hide">工事を選択してください</p -->
                    <b-table head-variant="light" sticky-header = "200px" class="table-sm table-bordered text-nowrap proj-table"
                        hover selectable select-mode="single" ref="refProjTable" :striped="striped" :no-border-collapse="noCollapse"
                        :items="projData" :fields="projFields" @row-selected="rowClickProjTable"/>
                        <!-- @row-dblclicked="projDblClick" -->
                    <b-row align-h="end" class="my-2 print-hide">
                        <b-col class="col-md-2">
                            <p class="print-hide ml-1">工事を選択してください</p>
                        </b-col>
                        <b-col class="col-md-9"/>
                        <b-col class="col-md-1">
                            <b-button @click="printProjTable" class="mr-0">ページ印刷</b-button>
                            <!-- b-button variant="primary" :disabled="!projSelected" @click="prodSearch">製品</b-button -->
                        </b-col>
                    </b-row>
                </div>

                <div v-if="isLoadingProj" class="text-center text-danger my-2">
                <b-spinner class="align-middle"></b-spinner>
                <strong>検索中...</strong>
                </div>
            </b-card>
        <b-alert v-if="message" show variant="danger">{{ message }}</b-alert>
    </div>
</template>

<style scoped>
@media print {
    .print-hide {
        display: none;
    }
    .card {
        border: none;
    }
}
@page {
      size:auto;
      margin-top: 1rem;
}
</style>

<script>
import axios from 'axios';
import apiUrls from '../common/apiUrls';
import commonMethods from '../common/commonMethods'

export default {
    props: ['projSettings', 'projInput'],
/*
    data() {
        return {
            projSearchForm: {
                projCode:  '',
                projName:  '',
                targetState: this.projSettings && this.projSettings.targetState || 5,
                startDateBegin: '',
                endDateBegin: '',
                startDateComplete: '',
                endDateComplete: '',
                targetStateOptions: [
                    { value: 1, text: '工事未着手' },
                    { value: 2, text: '工事着手' },
                    { value: 3, text: '工事未完了' },
                    { value: 4, text: '工事完了' },
                    { value: 5, text: '工事すべて' }]
            },
            tableHeight: this.projSettings && this.projSettings.tableHeight || '175px',
            projData: [],
            projFields: [],
            isLoadingProj: false,
            clickCount: 1,
            selectedRowProjId:'',
        }
    },
*/
    data() {
        return {
            titleProj: '工事進捗一覧',
            // titleProd: '製品進捗一覧',
            striped: true,
            noCollapse: true,
            //工事関連データ
            projSearchForm: {
                projCode: '',
                projName: '',
                startDateComplete: '',
                endDateComplete: '',
                startDateBegin: '',
                endDateBegin: '',
            },
            projStatus: 4,
            projStatusOptions: [
                { value: 0, text: '工事未着手' },
                { value: 1, text: '工事着手' },
                { value: 2, text: '工事未完了' },
                { value: 3, text: '工事完了' },
                { value: 4, text: '工事すべて' }
            ],
            projData: [],
            projFields: [],
            projSelected: '',

            isShowProjChoice: true,
            // isShowProdChoice: false,
            isShowProjTable: false,
            // isShowProdTable: false,
            message: '',
            table_height: window.innerHeight - 380 + 'px',
            isLoadingProj: false,
            // isLoadingProd: false,
            classPrintHideProj: '',
            // classPrintHideProd: ''
        }
    },
    mounted() {
        window.addEventListener('resize', () => {
            this.table_height = window.innerHeight - 380 + 'px';
        })
        window.addEventListener('beforeprint', () => {
            if(document.getElementsByClassName('proj-table').length) {
                let doubleHeadTable = document.getElementsByClassName('proj-table')[0].children[0].children[0];
                doubleHeadTable.children[0].removeAttribute('hidden');
                doubleHeadTable.children[1].removeAttribute('hidden');
            }
            if(document.getElementsByClassName('prod-table').length) {
                let doubleHeadTable = document.getElementsByClassName('prod-table')[0].children[0].children[0];
                doubleHeadTable.children[0].removeAttribute('hidden');
                doubleHeadTable.children[1].removeAttribute('hidden');
                doubleHeadTable.children[2].removeAttribute('hidden');
            }
        })
        window.addEventListener('afterprint', () => {
            if(document.getElementsByClassName('proj-table').length) {
                let doubleHeadTable = document.getElementsByClassName('proj-table')[0].children[0].children[0];
                doubleHeadTable.children[0].setAttribute('hidden', '');
                doubleHeadTable.children[1].setAttribute('hidden', '');
            }
            if(document.getElementsByClassName('prod-table').length) {
                let doubleHeadTable = document.getElementsByClassName('prod-table')[0].children[0].children[0];
                doubleHeadTable.children[0].setAttribute('hidden', '');
                doubleHeadTable.children[1].setAttribute('hidden', '');
                doubleHeadTable.children[2].setAttribute('hidden', '');
            }
        })
    },
/*        
    created: function() {
        if(!this.$store.state.loginData.accessToken) {
            this.$router.push('/')
        }
    },
*/
    created: function() {
        if(!this.$store.state.loginData.accessToken) {
            this.$router.push('/')
        } 
       // alert ("ProjSearch projInput " + this.projInput.projCode + " " + this.projInput.projName + " " + this.projInput.selectedRowProjId)
        if (this.projInput) {  
            if (this.projInput.projCode){
                this.projSearchForm.projCode =  this.projInput.projCode;
            }
            if (this.projInput.projName){
                this.projSearchForm.projName =  this.projInput.projName;
            }
            if (this.projInput.targetState){
                this.projSearchForm.targetState = this.projInput.targetState;
            }
            if (this.projInput.selectedRowProjId){
              this.selectedRowProjId = this.projInput.selectedRowProjId;
            }  
        
            if (this.projInput.projCode || this.projInput.projName || this.projInput.targetState){
                this.projSearch(null);          
            }            
            this.projInput.projCode='';
            this.projInput.projName='';
            this.projInput.targetState='';
            this.projInput.selectedRowProjId='';       
        }    
    }, 
    methods: {
        resetProjSearchForm() {
            this.projSearchForm = {
                projCode: '',
                projName: '',
                startDateComplete: '',
                endDateComplete: '',
                startDateBegin: '',
                endDateBegin: ''
            }
            //this.$store.state.searchForm = this.searchForm
        },
        async projSearchClick() {
            // console.log('projSearchClick Start !');
            await this.projSearch();
            // console.log('projSearch end !');
            let titleProj = this.titleProj;
            let projFields = this.projFields;
            this.isShowProjTable = true;

            commonMethods.sleep(100, 1, function () {
                //工事一覧表テーブルのヘッダーを取得（documentが作成されるまで待機する必要がある）
                // console.log(document.getElementsByClassName('proj-table')[0]);
                // console.log(document.getElementsByClassName('proj-table')[0].children[0]);
                // console.log(document.getElementsByClassName('proj-table')[0].children[0].children[0]);

                let doubleHeadTable = document.getElementsByClassName('proj-table')[0].children[0].children[0];
                    //入れ子を挿入
                let text = document.createTextNode(titleProj);
                let tr = document.createElement('tr');
                let th = document.createElement('th');
                tr.setAttribute('hidden', '');
                th.appendChild(text);
                th.setAttribute('style', 'text-align:center; font-size: 2em;');
                th.setAttribute('colspan', projFields.length);
                tr.appendChild(th);
                doubleHeadTable.prepend(tr);
                tr = document.createElement('tr');
                th = document.createElement('th');
                tr.setAttribute('hidden', '');
                th.setAttribute('style', 'padding-top: 2em;');
                th.setAttribute('colspan', projFields.length);
                tr.appendChild(th);
                doubleHeadTable.prepend(tr);
                // console.log('projSearchClick Sleep End !');
            });
            // this.prodData = [];
            // this.prodFields = [];
            // //this.$refs.refProjTable.selectRow(0);
            // console.log('projSearchClick End !');
        },
        async projSearch() {
            // console.log('projSearch Start !');
            this.message = '';
            this.isShowProjTable = false;
            // this.isShowProdChoice = false;
            // this.isShowProdTable = false;
            //this.$refs.refProjTable.selectRow(0);
            this.projData = [];
            this.projFields = [];
            let startDate = '';
            let endDate = '';
            this.isLoadingProj = true;
            if (this.projStatus == 1) {
                startDate = this.projSearchForm.startDateBegin
                endDate = this.projSearchForm.endDateBegin
            } else if (this.projStatus == 3) {
                startDate = this.projSearchForm.startDateComplete
                endDate = this.projSearchForm.endDateComplete
            }
            let payload = {
                ...this.projSearchForm.projCode && {projCode:        this.projSearchForm.projCode},
                ...this.projSearchForm.projName && {projName:        this.projSearchForm.projName},
                targetState:     this.projStatus + 1,
                ...startDate && {targetStartDate: startDate},
                ...endDate && {targetEndDate:   endDate}
            }
            let axiosConfigObject = {
                headers: {
                    Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                    'Content-Type': 'application/json',
                    },
                params:  payload
            }
            await axios.get(apiUrls.referProjProcMany, axiosConfigObject)
            .then(response => {
                this.projData = this.remakeResDt(response.data.resDt);
                this.projFields = this.remakeResDtTitle(response.data.resDtTitle);//, [1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]);
                if(response.data.resultCode != '000') {
                    this.message = commonMethods.getResponseMessage(response);
                    // console.log(this.message);
                //} else {
                //    this.isShowProdChoice = true;
                }
                // console.log(this.message);
            })
            .catch(error => {
                this.message = commonMethods.getErrorMessage(error);
            })
            .finally(() => {
                this.isLoadingProj = false;
                // console.log('finally !');

            })
        },

        projSelect(item) {
            if(item[0]) {
                this.$emit('emittedProjParams', item[0]);
            } else {
                this.$emit('emittedProjParams', {});
            }
    
        },
/*
        resetProjSearchForm() {
            this.projSearchForm = {
                projCode: '',
                projName: '',
                startDateComplete: '',
                endDateComplete: '',
                startDateBegin: '',
                endDateBegin: '',
                targetState: this.projSettings && this.projSettings.targetState || 5,
                targetStateOptions: [
                    { value: 1, text: '工事未着手' },
                    { value: 2, text: '工事着手' },
                    { value: 3, text: '工事未完了' },
                    { value: 4, text: '工事完了' },
                    { value: 5, text: '工事すべて' }]
            }
        },
 */

       rowClickProjTable(item) {
            console.log('item' + item);
            if(item[0]) {
                console.log('true item[0]' + item[0]);
                // if (this.projSelected != item[0]) {
                //     this.prodData.splice(0);
                //     this.prodFields.splice(0);
                // }
                this.projSelected = item[0];
                console.log('item[0].projId=' + item[0].projId);
                this.isShowProdChoice = true;
                this.$emit('emittedProjParams', item[0]);

            } else {
                console.log('false item[0]' + item[0]);
                this.projSelected = '';
                // this.isShowProdChoice = false;
                // this.$emit('emittedProjParams', {});
            }
        },

        printProjTable () {
            //let isShowProdChoice = this.isShowProdChoice;
            //let isShowProdTable = this.isShowProdTable;
            //this.isShowProdChoice = false;
            //this.isShowProdTable = false;
            //this.$forceUpdate();
            this.classPrintHideProj = '';
            // this.classPrintHideProd = 'print-hide';
            //let docTitle = document.title;  // タイトルを退避
            //document.title = '';          // タイトルを表示しないように漢字スペースをセット（空文字、半角スペースだとUrlがタイトルに入る）
            commonMethods.sleep(100, 1, function () {
                // 100ミリ秒*1回、待機後確認メッセージを表示
                if (confirm('印刷プレビューをしますが、よろしいでしょうか？')) {
                    window.print();
                }
                //document.title = docTitle;      // タイトルを元に戻す
            });
            //this.isShowProdChoice = isShowProdChoice;
            //this.isShowProdTable = isShowProdTable;
        },
/*        
        createFields(obj, order) {
            let a = [];
            let b = [];
            for(let i in obj) { a.push( {'key': i, 'label': obj[i]} ); }
            if(order) {
                for(let i in order) { b.push(a[order[i]]); }
                return b;
            }
            return a;
        },
*/
        //明細データ再編成関数
        remakeResDt(obj) {
            let c = [];
            for (let y in obj) {
                let a = {};
                for(let i in obj[y]) {
                    if (obj[y][i] instanceof Array) {
                        for(let n in obj[y][i]) {
                            a[i + n] = obj[y][i][n];
                        }
                    } else {
                        a[i] = obj[y][i];
                    }
                }
                c.push(a);
            }
            return c;
        },

        //カラム作成・並べ替え関数
        remakeResDtTitle(obj, order) {
            let a = []
            let b = []
            for(let i in obj) {
                if (obj[i] instanceof Array) {
                    for(let n in obj[i]) {
                        a.push( {'key': i + n, 'label': obj[i][n]} );
                    }
                } else {
                    if (i != 'listProgress') {
                        a.push( {'key': i, 'label': obj[i]} );
                    } else {
                        a.push( {'key': 'listProgress0', 'label': '工程１'} );
                        a.push( {'key': 'listProgress1', 'label': '工程２'} );
                        a.push( {'key': 'listProgress2', 'label': '工程３'} );
                        a.push( {'key': 'listProgress3', 'label': '工程４'} );
                        a.push( {'key': 'listProgress4', 'label': '工程５'} );
                        /*
                        a['listProgress0'] = '工程１';
                        a['listProgress1'] = '工程２';
                        a['listProgress2'] = '工程３';
                        a['listProgress3'] = '工程４';
                        a['listProgress4'] = '工程５';
                        */
                    }
                }
            }
            if(order) {
                for(let i in order) {
                    b.push(a[order[i]])
                }
                return b
            }
            return a
        },
    }
}
</script>