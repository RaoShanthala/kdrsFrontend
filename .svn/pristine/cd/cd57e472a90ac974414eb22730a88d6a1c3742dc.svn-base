<template>
<div>
    <b-card bg-variant="light" :class="classPrintHideProj" height="100px">
        <b-row class="print-hide">  
            <b-col class="col-md-11">   
                <b-form inline class="mt-0">
                    <b-form-group  label="工事コード" class="mr-3">
                        <b-form-input id="projCode" v-model="projSearchForm.projCode"/>
                    </b-form-group>
                    <b-form-group label="工事名称" class="mr-3">
                        <b-form-input id="projName" v-model="projSearchForm.projName"/>
                    </b-form-group>
                    <b-form-group class="mt-5 mb-4 mr-3">
                        <b-form-radio-group v-model="projSearchForm.targetState" :options="targetStateOptions"/>
                    </b-form-group>
                    <b-form-group v-if="projSearchForm.targetState==2" label="工事着手日From" class="mr-3">
                        <b-datepicker today-button reset-button close-button
                            label-today-button="今日" label-reset-button="クリア" label-close-button="キャンセル"
                            placeholder="日付を選択してください" v-model="projSearchForm.startDateBegin"/>
                    </b-form-group>
                    <b-form-group v-if="projSearchForm.targetState==2" label="工事着手日To" class="mr-3">
                        <b-datepicker today-button reset-button close-button
                            label-today-button="今日" label-reset-button="クリア" label-close-button="キャンセル"
                            placeholder="日付を選択してください" v-model="projSearchForm.endDateBegin"/>
                    </b-form-group>
                    <b-form-group  v-if="projSearchForm.targetState==4" label="工事完了日From" class="mr-3">
                        <b-datepicker today-button reset-button close-button
                            label-today-button="今日" label-reset-button="クリア" label-close-button="キャンセル"
                            placeholder="日付を選択してください" v-model="projSearchForm.startDateComplete"/>
                    </b-form-group>
                    <b-form-group v-if="projSearchForm.targetState==4" label="工事完了日To" class="mr-3">
                        <b-datepicker today-button reset-button close-button
                            label-today-button="今日" label-reset-button="クリア" label-close-button="キャンセル"
                            placeholder="日付を選択してください" v-model="projSearchForm.endDateComplete"/>
                    </b-form-group>
                    <b-form-group class="mt-4 mr-1">
                        <div style="margin-top: 0.4rem;">
                            <b-button @click="projSearchClick(null)" class="mr-1">検索</b-button>
                            <b-button variant="outline-primary" @click="resetProjSearchForm">クリア</b-button>
                        </div>
                    </b-form-group>
                </b-form>
            </b-col>
            <!-- <b-col class="col-md-1">
                <div class="text-right mt-1" v-if="showShinkiButton">
                    <b-button @click="registerProject" class="mr-1 mt-5">新規</b-button>  
                </div>
            </b-col> -->
        </b-row> 
        <div v-if="maintenanceMode" :class="classPrintHideProj">
            <div v-if="projData.length">
                <b-table ref="tableRef"
                    head-variant="light"
                    class="table-sm table-bordered text-nowrap proj-table"
                    :sticky-header="tableHeight"
                    no-border-collapse
                    responsive
                    striped
                    selected-variant="info"
                    selectable
                    select-mode="single"
                    @row-selected="projSelect"
                    :items="projData"
                    :fields="projFields">
                    <template #cell(update)="row">
                        <div v-if="showShinkiButton">
                            <b-link class="button print-hide" v-on:click="updateProject(row.item.projId)">更新/削除</b-link> 
                        </div>
                        <div v-else>
                            <b-link class="button print-hide" v-on:click="updateProject(row.item.projId)">更新</b-link>
                        </div>
                    </template> 
                </b-table>
                <!-- <div class="text-right mt-1 print-hide" v-if="showShinkiButton">
                    <b-button @click="printProjTable" class="mr-1 mt-0">印刷</b-button>
                </div> -->
                <b-row align-h="end" class="my-0 print-hide" v-if="showShinkiButton">
                    <b-col class="col-md-2">
                        <p class="print-hide ml-1">工事を選択してください</p>
                    </b-col>
                    <b-col class="col-md-8"/>
                    <b-col class="col-md-2">
                        <div class="d-flex justify-content-end">
                            <b-button @click="printProjTable" class="mr-0">印刷</b-button>
                        </div>
                    </b-col>
                </b-row>
            </div>
        </div>
        <div v-else>
            <div v-if="projData.length">
                <b-table ref="tableRef"
                    head-variant="light"
                    class="table-sm table-bordered text-nowrap"
                    :sticky-header="tableHeight"
                    no-border-collapse
                    responsive
                    striped
                    selected-variant="info"
                    selectable
                    select-mode="single"
                    @row-selected="projSelect"
                    :items="projData"
                    :fields="projFields"/>
            </div>
        </div>

    </b-card>
    <div v-if="isLoadingProj" class="text-center text-danger my-2">
        <b-spinner class="align-middle"></b-spinner>
        <strong>検索中...</strong>
    </div>
    <b-alert class="mt-4 print-hide" v-if="message" show variant="danger">{{ message }}</b-alert>
</div>
</template>

<style scoped>
    .button {
        font: 11px Arial;
        text-decoration: none;
        background-color: #7E7E7E; /* #817d7d; */
        color: #FFFFFF;
        padding: 4px 20px 4px 20px;
        border-top: 1px solid #CCCCCC;
        border-right: 1px solid #333333;
        border-bottom: 1px solid #333333;
        border-left: 1px solid #CCCCCC;
    }
    .card-body {
        padding-top: 0;
    }
    /* 印刷ボタンのマージン設定 */
    .b-table-sticky-header, .table-responsive, [class*=table-responsive-] {
        margin-bottom: 0.5rem;
    }
    .col > p {
        margin-bottom: 0.5rem;
    }
    @media print {
        .print-hide {
            display: none;
        }
        .card {
            border: none;
        }
    }
    @page {
        size:auto;
        margin-top: 1rem;
    }
</style>

<script>
import axios from 'axios';
import apiUrls from '../common/apiUrls';
import commonMethods from '@/common/commonMethods';

export default {
    props: ['projSettings', 'projInput', 'classPrintHideProj', 'revertTableContent'],
    watch:{
        revertTableContent() {
            this.tableRevert();
        }
    },    
    data() {                                                                    
        return {
            titleProj: '工事一覧',
            projSearchForm: {
                projCode:  '',
                projName:  '',
                targetState: this.projSettings && this.projSettings.targetState || 5,
                startDateBegin: '',
                endDateBegin: '',
                startDateComplete: '',
                endDateComplete: '',
                isShowProjTable: '',
                selectedRowProjId: '',
            },
            targetStateOptions: [
                { value: 1, text: '工事未着手' },
                { value: 2, text: '工事着手' },
                { value: 3, text: '工事未完了' },
                { value: 4, text: '工事完了' },
                { value: 5, text: '工事すべて' }
            ],
            tableHeight: this.projSettings?.tableHeight || '175px',
            maintenanceMode: this.projSettings?.maintenanceMode || false,
            projData: [],
            projFields: [],
            isLoadingProj: false,
            clickCount: 1,
            showShinkiButton: this.projSettings?.addButtonMode || false,
            currentMenuName:'',
            message:'',
        }
    },
    created: function() {
        if(!this.$store.state.loginData.accessToken) {
            this.$router.push('/')
        } 
        this.currentMenuName = commonMethods.getCurrentMenu();
        // 子画面から戻ったときに子画面を呼び出す前の状態にするためにprojSearch()でセーブした情報をloadする。
        let projSearchForm = commonMethods.loadCommonArea(this.currentMenuName + "_ProjSearchForm");
        // console.log('comp projSearchForm=' + projSearchForm);
        // console.log('comp this.projInput=' + this.projInput);
        if (projSearchForm) {
            // 子画面から戻ったとき
            for (let item in this.projSearchForm) {
                this.projSearchForm[item] = projSearchForm[item];
                // console.log('comp 1 this.projSearchForm[' + item + ']=' + this.projSearchForm[item]);
            }
        } else if (this.projInput) {
            // 初回の呼び出しのとき
            for (let item in this.projSearchForm) {
                this.projSearchForm[item] = this.projInput[item];
                // console.log('comp 2 this.projSearchForm[' + item + ']=' + this.projSearchForm[item]);
            }
        }
        // if (this.maintenanceMode && this.projSearchForm.isShowProjTable) {
        //     // 工事/製品メンテで、工事、または製品の更新/削除ボタンで子画面に遷移後、戻ってきたときの工事一覧の再表示。
        //     this.projSearchRestore(null);
        // } else 
        if (this.projSearchForm.selectedRowProjId) {
            // 工事/製品メンテで、工事、または製品の更新/削除ボタンで子画面に遷移後、戻ってきたときの工事一覧の再表示。
            // 集計単位関係メンテで、登録/更新画面の子画面に遷移後、戻ってきたときの工事一覧の再表示。
            this.projSearchRestore(null);    
        }
    }, 
    // mounted() {
    //     window.addEventListener('resize', () => {
    //         this.table_height = window.innerHeight - 380 + 'px';
    //     })
    // },
    methods: {
        resetProjSearchForm() {
            for (let item in this.projSearchForm) {
                this.projSearchForm[item] = '';
            }
            this.projSearchForm.targetState = this.projSettings && this.projSettings.targetState ? this.projSettings.targetState : 5;
            this.projData = [];
            this.message = '';
            // this.projSelect()を呼び出して、this.$emit('emitProjSelect', {});を実行し、工事一覧の行選択を解除する。
            let projData = [];
            projData.push(null);
            this.projSelect(projData);
        },

        tableRevert() {
            this.projFields = this.projFieldsCopy;
            // this.revertTableContent = false;
            this.$parent.revertTableContent = false;
        },
        // 子画面から戻ってきたとき
        async projSearchRestore() {
            // console.log('projSearchRestore start !');
            await this.projSearch();
            // console.log('projSearchRestore end !');
        },
        // 工事の検索ボタンがクリックされたとき
        async projSearchClick() {
            this.projSearchForm.selectedRowProjId = "";
            await this.projSearch();

            if (this.projSearchForm.isShowProjTable != true) {
                this.$emit('emitProjSearchButton', 0);
                return;
            }
            this.$emit('emitProjSearchButton', 1);

            if (this.maintenanceMode == false) {
                return;
            }

            // let titleProj = this.titleProj;
            // let projFields = this.projFields;
            // commonMethods.sleep(100, 1, function () {
            //     //工事一覧表テーブルのヘッダーを取得（documentが作成されるまで待機する必要がある）
            //     commonMethods.printPrepare('proj-table', projFields.length, titleProj, '');
            // });
            // console.log('projSearchClick End !');
        },

        async projSearch(searchMode) {
            //console.log(this.tableHeight)
            this.projData = [];
            this.isLoadingProj = true;
            this.projSearchForm.isShowProjTable = false;
            this.message = '';

            let startDate, endDate;
            if (this.projSearchForm.targetState == 2) {
                startDate = this.projSearchForm.startDateBegin;
                endDate = this.projSearchForm.endDateBegin;
            } else if (this.projSearchForm.targetState == 4) {
                startDate = this.projSearchForm.startDateComplete;
                endDate = this.projSearchForm.endDateComplete;
            } else {
                startDate = '';
                endDate = '';
            }

            let payload;
            if(searchMode) {
                payload = {
                    ...this.projSearchForm.projCode    && { projCode:   this.projSearchForm.projCode },
                    ...this.projSearchForm.targetState && {targetState: + this.projSearchForm.targetState},  
                }
            } else {
                payload = {
                    searchMode: searchMode,
                    ...this.projSearchForm.projCode    && { projCode:   this.projSearchForm.projCode },
                    ...this.projSearchForm.projName    && { projName:   this.projSearchForm.projName },
                    ...this.projSearchForm.targetState && {targetState: + this.projSearchForm.targetState},
                    ...startDate && {targetStartDate: startDate},
                    ...endDate && {targetEndDate:   endDate}
                }
            }
            let axiosConfigObject = {
                headers: {
                    Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                    'Content-Type': 'application/json',
                    },
                params:  payload}
            await axios.get(apiUrls.referProjectMany, axiosConfigObject)
            .then(response => {
                this.projData = response.data.resDt;
                
                this.projFields = this.createFields(response.data.resDtTitle);
                if(response.data.resultCode != '000') {
                    this.message = commonMethods.getResponseMessage(response)
                    // this.$emit('emitShowOtherData', false);
                } else {
                    this.projSearchForm.isShowProjTable = true;
                }
            })
            .catch(error => {
                this.message = commonMethods.getErrorMessage(error);
            })
            .finally(() => {
                this.isLoadingProj = false;
                if (this.projSearchForm.isShowProjTable && this.projSearchForm.selectedRowProjId) {
                    const row = this.projData.findIndex(x => x.projId === this.projSearchForm.selectedRowProjId);
                    if ( row > -1) {
                        this.$refs.tableRef.selectRow(row);
                        //scrolls down to the position of selected row
                        const tbody = this.$refs.tableRef.$el.querySelector('tbody');
                        const selectRow = tbody.querySelectorAll('tr')[row];
                       // selectRow.scrollIntoView();
                        selectRow.scrollIntoView({behavior: "smooth", block: "center", inline: "nearest"});
                        // selectRowで行を選択することでthis.projSelect()メソッドが呼び出されるので次の処理は不要。
                        // let projData = [];
                        // projData.push(this.projData[row]);
                        // this.projSelect(projData);
                        // console.log('projSearch selectRow.scrollIntoView() end !');
                    } else {
                        this.projSearchForm.selectedRowProjId = "";
                    }    
                }
                // 工事/製品メンテで子画面から戻ったときに子画面を呼び出す前の状態にするためにセーブする（createでloadする）。
                commonMethods.saveCommonArea(this.currentMenuName + "_ProjSearchForm", this.projSearchForm);
            })
        },
        // 工事一覧の行がクリック、または行をselectRow.scrollIntoView()で選択したときに呼び出される。
        projSelect(item) {
            // console.log('projItem item=' + item);
            if(item[0]) {
                // console.log('projItem item[0]=' + item[0]);
                // console.log('projItem item[0].projId=' + item[0].projId);
                this.projSearchForm.selectedRowProjId = item[0].projId;
                this.$emit('emitProjSelect', item[0]);
            } else {
                this.$emit('emitProjSelect', {});
            }
        },

        registerProject() {
            commonMethods.saveCommonArea(this.currentMenuName + "_ProjSearchForm", this.projSearchForm);
            commonMethods.clickMenuForward(this.$route.path, 'registerproject');
        },

        updateProject(item) {
            this.projSearchForm.selectedRowProjId = item;
            // console.log('updateProject this.projSearchForm.selectedRowProjId=' + this.projSearchForm.selectedRowProjId);
            commonMethods.saveCommonArea(this.currentMenuName + "_ProjSearchForm", this.projSearchForm);

            let payload = {
                projId: item
            }
            let axiosConfigObject = {
                headers: {
                    Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                    'Content-Type': 'application/json',
                },
                params:  payload
            }
            axios.get(apiUrls.referProjectMany, axiosConfigObject).then(response => {
                if(response.data.resultCode != '000') {
                    // console.log(response.data.resultMessage);
                    this.message = commonMethods.getResponseMessage(response);
                } else {                   
                    this.$store.state.responseData = response.data.resDt[0];
                    this.$emit('emitUpdateProject', item);

                    if (this.showShinkiButton) {
                        // 新規登録を行うときは削除処理を行う（画面タイトル：工事更新/削除画面）
                        commonMethods.clickMenuForward(this.$route.path, 'projectupdate');
                    } else {
                        // 新規登録を行わないときは削除処理を行わない（画面タイトル：工事更新画面）
                        commonMethods.clickMenuForward(this.$route.path, 'projectupdonly');
                    }
                }
            })
            .catch(error => {
                this.message = commonMethods.getErrorMessage(error);
            })       
        },

        printProjTable () {
            if (confirm('印刷プレビューをしますが、よろしいでしょうか？')) {
                // this.printing = true;
                this.projFieldsCopy = [];
                this.projFieldsCopy = this.projFields;
                this.projFields = this.projFieldsCopy.filter(field => !field.required); 
                
                let titleProj = this.titleProj;
                let projFields = this.projFields;
                commonMethods.printPrepare('proj-table', projFields.length, titleProj, '');

                // this.classPrintHideProj = '';    // プロパティへの設定は親でないと効かない
                this.$emit('emitProjPrintButton', this.clickCount++);

                commonMethods.sleep(100, 1, function () {
                    // 100ミリ秒*1回、待機後確認メッセージを表示
                    // commonMethods.printDesingHandler('proj-table', true);    // この処理は親画面で行う
                    window.print();
                    // commonMethods.printDesingHandler('proj-table', false);   // この処理は親画面で行う
                });
            }
        },
       
        createFields(obj, order) {
            let a = [];
            let b = [];
            for(let i in obj) { a.push( {'key': i, 'label': obj[i]} ); }
            if(order) {
                for(let i in order) { b.push(a[order[i]]); }
                return b;
            }
            if(this.maintenanceMode) {
                // a.push( {'key': 'update', 'label': ''} );
                a.push( {'key': 'update', 'label': '', 'required': 'true' } )
            }
            return a;
        }
    }
}
</script>