<template>
    <div>
        <b-form inline id="login-form">       
            <b-input-group v-if="!this.$store.state.loginData.accessToken" class="mb-2 mr-sm-2 mb-sm-0">
                <b-input-group-prepend is-text>
                    <b-icon icon="person-fill"></b-icon>
                </b-input-group-prepend>
                <b-form-input placeholder="ユーザ名" v-model="username" @keyup.enter="enterLogin"></b-form-input>
            </b-input-group>
            <b-input-group v-if="!this.$store.state.loginData.accessToken" class="mb-2 mr-sm-2 mb-sm-0">
                <b-input-group-prepend is-text>
                    <b-icon icon="lock-fill"></b-icon>
                </b-input-group-prepend>
                <b-form-input placeholder="パスワード" v-model="password" type="password" @keyup.enter="enterLogin"></b-form-input>
            </b-input-group>
            <b-button @click="clickLogin" @keyup.ctrl.enter="ctrlEnterLogin"
                v-if="!this.$store.state.loginData.accessToken">送信</b-button>
             <!-- <b-button @click="ctrlEnterLogin"
                v-if="!this.$store.state.loginData.accessToken">Next</b-button>     -->
            <!-- b-button @click="logout" v-else>ログアウト</b-button -->
        </b-form>

        <div v-if="this.isShowAccessToken && this.$store.state.loginData.accessToken">
            <b-button @click="logout">ログアウト</b-button>
            <b-table :items="[this.$store.state.loginData]" :fields="fields"></b-table>
            <b-button @click="clickMenu" variant="info">メニュー</b-button>
        </div>

        <div id="message" v-if="message">
            <b-alert show variant="danger">{{message}}</b-alert>
        </div>
    </div>
</template>

<style scoped>
    #message {
        margin-top: 1rem;
    }
    table {
        margin-top: 1rem;
    }
</style>

<script>
import axios from 'axios'
import apiUrls from '../common/apiUrls'
import security from '../common/security'
import commonMethods from '../common/commonMethods'

//import bcrypt from 'bcryptjs'
export default {
    data() {
        return {
            username: '',
            password: '',
            fields:  [
                    { key:   'username',    label: 'ユーザ名' }, 
                    { key:   'email',       label: 'メールアドレス' }, 
                    { key:   'password',    label: 'パスワード' }, 
                    { key:   'roles',       label: 'ロール' }, 
                    { key:   'accessToken', label: 'トークン' } 
                    ],
            message: '',
            isShowAccessToken: false,
        }
    },
    methods: {
        enterLogin() {
            this.clickLogin() ;
        },
        async clickLogin() {
            await this.login();
            if (this.$store.state.loginData.id != '') {
                commonMethods.saveCommonArea('modeTest', false)
                this.$router.push({path: '/menu'});
            }
        },
        ctrlEnterLogin() {
            this.isShowAccessToken = true;
            this.login();
        },
        async login() {
            //let hashed_password = bcrypt.hashSync(this.password, 10)
            //let hashed_password = this.getHash(this.password)
            let hashed_password = security.getHash(this.password)
            this.message = ''
            await axios.post(apiUrls.signIn,
            {
                username: this.username,
                password: hashed_password
            })
            .then(response => {
                response.data.password = hashed_password
                this.$store.state.loginData = response.data
                /*
                requestParams.httpRequestHeaders = {
                    Authorization:  'Bearer ' +  this.$store.state.loginData.accessToken,
                    'Content-Type': 'application/json',
                    //'Access-Control-Allow-Origin': '*'
                }*/
            })
            .catch(error => {
                //console.log('error.response.data.code=' + error.response.data.code);
                //console.log('error.response.data.message=' + error.response.data.message);
                // ログイン処理のエラーは、error.response.data.statusにセットされないので、次のとおり表示する。
                this.message = commonMethods.getErrorMessage(error);
            })
        },
        clickMenu() {
            this.isShowAccessToken = false;
            commonMethods.saveCommonArea('modeTest', true)
            this.$router.push({path: '/menu'});
        },
        logout() {
            this.$store.state.loginData = {
                id:          '',
                username:    '',
                email:       '',
                roles:       [],
                accessToken: ''
            }
            this.$store.rolesResDt = [];
            this.$store.rolesResDt = null;
            this.$store.roleLevelsResDt = [];
            this.$store.roleLevelsResDt = null;
        }
    }
}
</script>